
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 25 18:19:53 CET 2013
//----------------------------------------------------

package net.lemonmodel.patterns.parser;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 25 18:19:53 CET 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\174\000\002\002\004\000\002\002\003\000\002\003" +
    "\011\000\002\003\012\000\002\004\002\000\002\004\004" +
    "\000\002\005\006\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\006\010\000\002\006\010\000\002" +
    "\006\020\000\002\006\014\000\002\006\014\000\002\006" +
    "\026\000\002\006\022\000\002\007\010\000\002\007\014" +
    "\000\002\007\020\000\002\007\004\000\002\007\004\000" +
    "\002\007\003\000\002\007\022\000\002\007\020\000\002" +
    "\010\004\000\002\010\004\000\002\011\014\000\002\012" +
    "\010\000\002\012\012\000\002\012\012\000\002\012\010" +
    "\000\002\012\014\000\002\012\012\000\002\013\002\000" +
    "\002\013\003\000\002\013\005\000\002\014\004\000\002" +
    "\014\005\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\006" +
    "\000\002\014\006\000\002\014\003\000\002\015\005\000" +
    "\002\016\002\000\002\016\003\000\002\016\005\000\002" +
    "\017\003\000\002\017\006\000\002\020\003\000\002\020" +
    "\006\000\002\021\003\000\002\021\006\000\002\022\003" +
    "\000\002\022\006\000\002\023\005\000\002\024\002\000" +
    "\002\024\003\000\002\024\005\000\002\025\004\000\002" +
    "\025\004\000\002\025\004\000\002\025\007\000\002\025" +
    "\007\000\002\025\011\000\002\026\002\000\002\026\003" +
    "\000\002\026\005\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\005\000\002\030\002" +
    "\000\002\030\004\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\032\005" +
    "\000\002\032\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0142\000\010\002\ufffd\004\ufffd\035\ufffd\001\002\000" +
    "\010\002\000\004\007\035\011\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\004\156\u013f\001" +
    "\002\000\010\002\ufffc\004\ufffc\035\ufffc\001\002\000\004" +
    "\011\012\001\002\000\006\006\013\156\015\001\002\000" +
    "\004\157\u013d\001\002\000\004\012\020\001\002\000\004" +
    "\005\016\001\002\000\004\156\017\001\002\000\114\006" +
    "\uff87\007\uff87\012\uff87\013\uff87\016\uff87\020\uff87\054\uff87" +
    "\061\uff87\063\uff87\070\uff87\071\uff87\073\uff87\075\uff87\076" +
    "\uff87\100\uff87\102\uff87\104\uff87\105\uff87\106\uff87\107\uff87" +
    "\110\uff87\111\uff87\112\uff87\115\uff87\121\uff87\122\uff87\124" +
    "\uff87\125\uff87\131\uff87\141\uff87\142\uff87\144\uff87\146\uff87" +
    "\147\uff87\151\uff87\154\uff87\156\uff87\001\002\000\004\154" +
    "\021\001\002\000\004\012\022\001\002\000\044\013\uffdf" +
    "\022\035\023\033\024\032\030\044\032\043\033\042\034" +
    "\041\037\040\044\027\045\026\046\025\047\024\050\023" +
    "\051\050\116\036\150\047\001\002\000\004\011\u0120\001" +
    "\002\000\004\011\u010f\001\002\000\004\011\u0106\001\002" +
    "\000\004\011\375\001\002\000\004\011\370\001\002\000" +
    "\010\012\ufff9\013\ufff9\153\ufff9\001\002\000\010\012\ufffa" +
    "\013\ufffa\153\ufffa\001\002\000\004\011\350\001\002\000" +
    "\004\011\321\001\002\000\010\012\262\013\uffde\153\261" +
    "\001\002\000\004\011\247\001\002\000\006\101\161\113" +
    "\157\001\002\000\010\012\uffeb\013\uffeb\153\uffeb\001\002" +
    "\000\004\011\234\001\002\000\004\011\225\001\002\000" +
    "\004\011\216\001\002\000\004\011\204\001\002\000\004" +
    "\011\165\001\002\000\010\012\ufff8\013\ufff8\153\ufff8\001" +
    "\002\000\004\013\164\001\002\000\006\101\161\113\157" +
    "\001\002\000\004\011\051\001\002\000\006\053\054\154" +
    "\052\001\002\000\004\012\uffca\001\002\000\004\012\116" +
    "\001\002\000\004\011\055\001\002\000\006\013\uffc5\154" +
    "\057\001\002\000\004\013\115\001\002\000\004\017\063" +
    "\001\002\000\006\012\061\013\uffc4\001\002\000\006\013" +
    "\uffc5\154\057\001\002\000\004\013\uffc3\001\002\000\062" +
    "\055\101\056\100\057\077\060\075\062\073\064\071\066" +
    "\113\067\112\072\106\074\105\077\103\114\102\117\076" +
    "\120\074\123\072\126\111\127\110\130\107\133\104\137" +
    "\070\143\067\145\065\152\114\154\064\001\002\000\006" +
    "\012\uff88\013\uff88\001\002\000\006\012\uff8a\013\uff8a\001" +
    "\002\000\006\012\uffc6\013\uffc6\001\002\000\006\012\uff8b" +
    "\013\uff8b\001\002\000\006\012\uff8c\013\uff8c\001\002\000" +
    "\006\012\uff9a\013\uff9a\001\002\000\006\012\uff91\013\uff91" +
    "\001\002\000\006\012\uff9b\013\uff9b\001\002\000\006\012" +
    "\uff92\013\uff92\001\002\000\006\012\uff9c\013\uff9c\001\002" +
    "\000\006\012\uff93\013\uff93\001\002\000\006\012\uff9d\013" +
    "\uff9d\001\002\000\006\012\uff9e\013\uff9e\001\002\000\006" +
    "\012\uff9f\013\uff9f\001\002\000\006\012\uff94\013\uff94\001" +
    "\002\000\006\012\uff95\013\uff95\001\002\000\006\012\uff8d" +
    "\013\uff8d\001\002\000\006\012\uff96\013\uff96\001\002\000" +
    "\006\012\uff97\013\uff97\001\002\000\006\012\uff8e\013\uff8e" +
    "\001\002\000\006\012\uff8f\013\uff8f\001\002\000\006\012" +
    "\uff90\013\uff90\001\002\000\006\012\uff98\013\uff98\001\002" +
    "\000\006\012\uff99\013\uff99\001\002\000\006\012\uff89\013" +
    "\uff89\001\002\000\004\012\uffc9\001\002\000\006\006\013" +
    "\156\015\001\002\000\006\012\121\013\120\001\002\000" +
    "\010\012\ufff0\013\ufff0\153\ufff0\001\002\000\006\134\123" +
    "\135\122\001\002\000\004\014\150\001\002\000\004\014" +
    "\124\001\002\000\022\025\133\026\132\027\130\031\131" +
    "\041\125\042\127\043\126\052\134\001\002\000\014\012" +
    "\uffd3\013\uffd3\016\uffd3\121\uffd3\141\uffd3\001\002\000\004" +
    "\011\145\001\002\000\004\011\142\001\002\000\014\012" +
    "\uffd9\013\uffd9\016\uffd9\121\uffd9\141\uffd9\001\002\000\014" +
    "\012\uffd8\013\uffd8\016\uffd8\121\uffd8\141\uffd8\001\002\000" +
    "\014\012\uffd6\013\uffd6\016\uffd6\121\uffd6\141\uffd6\001\002" +
    "\000\014\012\uffd7\013\uffd7\016\uffd7\121\uffd7\141\uffd7\001" +
    "\002\000\014\012\uffda\013\uffda\016\uffda\121\uffda\141\uffda" +
    "\001\002\000\010\013\140\121\137\141\136\001\002\000" +
    "\006\006\013\156\015\001\002\000\014\012\uffdc\013\uffdc" +
    "\016\uffdc\121\uffdc\141\uffdc\001\002\000\010\012\uffef\013" +
    "\uffef\153\uffef\001\002\000\014\012\uffdb\013\uffdb\016\uffdb" +
    "\121\uffdb\141\uffdb\001\002\000\004\154\143\001\002\000" +
    "\004\013\144\001\002\000\014\012\uffd4\013\uffd4\016\uffd4" +
    "\121\uffd4\141\uffd4\001\002\000\004\154\146\001\002\000" +
    "\004\013\147\001\002\000\014\012\uffd5\013\uffd5\016\uffd5" +
    "\121\uffd5\141\uffd5\001\002\000\022\025\133\026\132\027" +
    "\130\031\131\041\125\042\127\043\126\052\134\001\002" +
    "\000\010\012\152\121\137\141\136\001\002\000\004\132" +
    "\153\001\002\000\004\014\154\001\002\000\022\025\133" +
    "\026\132\027\130\031\131\041\125\042\127\043\126\052" +
    "\134\001\002\000\010\013\156\121\137\141\136\001\002" +
    "\000\010\012\uffee\013\uffee\153\uffee\001\002\000\004\030" +
    "\044\001\002\000\010\012\uffed\013\uffed\153\uffed\001\002" +
    "\000\004\030\044\001\002\000\010\012\uffe8\013\uffe8\153" +
    "\uffe8\001\002\000\010\012\uffe7\013\uffe7\153\uffe7\001\002" +
    "\000\010\002\ufffe\004\ufffe\035\ufffe\001\002\000\006\053" +
    "\054\154\052\001\002\000\004\012\167\001\002\000\006" +
    "\006\013\156\015\001\002\000\004\012\171\001\002\000" +
    "\004\015\172\001\002\000\010\006\013\016\uffd1\156\015" +
    "\001\002\000\006\012\202\016\uffd0\001\002\000\004\061" +
    "\200\001\002\000\004\016\176\001\002\000\004\013\177" +
    "\001\002\000\010\012\uffe6\013\uffe6\153\uffe6\001\002\000" +
    "\022\025\133\026\132\027\130\031\131\041\125\042\127" +
    "\043\126\052\134\001\002\000\014\012\uffd2\013\uffd2\016" +
    "\uffd2\121\137\141\136\001\002\000\010\006\013\016\uffd1" +
    "\156\015\001\002\000\004\016\uffcf\001\002\000\006\021" +
    "\207\154\205\001\002\000\004\012\uffc8\001\002\000\004" +
    "\012\213\001\002\000\004\011\210\001\002\000\006\013" +
    "\uffc5\154\057\001\002\000\004\013\212\001\002\000\004" +
    "\012\uffc7\001\002\000\006\006\013\156\015\001\002\000" +
    "\004\013\215\001\002\000\010\012\uffe5\013\uffe5\153\uffe5" +
    "\001\002\000\006\021\207\154\205\001\002\000\004\012" +
    "\220\001\002\000\006\006\013\156\015\001\002\000\004" +
    "\012\222\001\002\000\004\154\223\001\002\000\004\013" +
    "\224\001\002\000\010\012\uffe3\013\uffe3\153\uffe3\001\002" +
    "\000\006\021\207\154\205\001\002\000\004\012\227\001" +
    "\002\000\006\006\013\156\015\001\002\000\004\012\231" +
    "\001\002\000\006\006\013\156\015\001\002\000\004\013" +
    "\233\001\002\000\010\012\uffe4\013\uffe4\153\uffe4\001\002" +
    "\000\006\040\236\154\235\001\002\000\004\012\uffce\001" +
    "\002\000\004\011\243\001\002\000\004\012\240\001\002" +
    "\000\006\006\013\156\015\001\002\000\004\013\242\001" +
    "\002\000\010\012\ufff7\013\ufff7\153\ufff7\001\002\000\006" +
    "\013\uffc5\154\057\001\002\000\004\013\245\001\002\000" +
    "\004\012\uffcd\001\002\000\010\012\uffec\013\uffec\153\uffec" +
    "\001\002\000\006\036\251\154\250\001\002\000\004\012" +
    "\uffcc\001\002\000\004\011\256\001\002\000\004\012\253" +
    "\001\002\000\006\006\013\156\015\001\002\000\004\013" +
    "\255\001\002\000\010\012\ufff6\013\ufff6\153\ufff6\001\002" +
    "\000\006\013\uffc5\154\057\001\002\000\004\013\260\001" +
    "\002\000\004\012\uffcb\001\002\000\066\006\uffa1\054\uffa1" +
    "\070\uffa1\071\uffa1\076\uffa1\100\uffa1\102\uffa1\104\uffa1\105" +
    "\uffa1\106\uffa1\107\uffa1\110\uffa1\111\uffa1\112\uffa1\115\uffa1" +
    "\122\uffa1\124\uffa1\125\uffa1\131\uffa1\142\uffa1\144\uffa1\146" +
    "\uffa1\147\uffa1\151\uffa1\154\uffa1\156\uffa1\001\002\000\044" +
    "\013\uffdf\022\035\023\033\024\032\030\044\032\043\033" +
    "\042\034\041\037\040\044\027\045\026\046\025\047\024" +
    "\050\023\051\050\116\036\150\047\001\002\000\004\013" +
    "\uffdd\001\002\000\066\006\013\054\302\070\310\071\307" +
    "\076\304\100\276\102\275\104\273\105\271\106\267\107" +
    "\265\110\315\111\314\112\303\115\301\122\277\124\312" +
    "\125\311\131\306\142\274\144\272\146\266\147\316\151" +
    "\313\154\270\156\015\001\002\000\066\006\uffa9\054\uffa9" +
    "\070\uffa9\071\uffa9\076\uffa9\100\uffa9\102\uffa9\104\uffa9\105" +
    "\uffa9\106\uffa9\107\uffa9\110\uffa9\111\uffa9\112\uffa9\115\uffa9" +
    "\122\uffa9\124\uffa9\125\uffa9\131\uffa9\142\uffa9\144\uffa9\146" +
    "\uffa9\147\uffa9\151\uffa9\154\uffa9\156\uffa9\001\002\000\066" +
    "\006\uffa7\054\uffa7\070\uffa7\071\uffa7\076\uffa7\100\uffa7\102" +
    "\uffa7\104\uffa7\105\uffa7\106\uffa7\107\uffa7\110\uffa7\111\uffa7" +
    "\112\uffa7\115\uffa7\122\uffa7\124\uffa7\125\uffa7\131\uffa7\142" +
    "\uffa7\144\uffa7\146\uffa7\147\uffa7\151\uffa7\154\uffa7\156\uffa7" +
    "\001\002\000\066\006\uffa5\054\uffa5\070\uffa5\071\uffa5\076" +
    "\uffa5\100\uffa5\102\uffa5\104\uffa5\105\uffa5\106\uffa5\107\uffa5" +
    "\110\uffa5\111\uffa5\112\uffa5\115\uffa5\122\uffa5\124\uffa5\125" +
    "\uffa5\131\uffa5\142\uffa5\144\uffa5\146\uffa5\147\uffa5\151\uffa5" +
    "\154\uffa5\156\uffa5\001\002\000\010\012\ufffb\013\ufffb\153" +
    "\ufffb\001\002\000\066\006\uffb4\054\uffb4\070\uffb4\071\uffb4" +
    "\076\uffb4\100\uffb4\102\uffb4\104\uffb4\105\uffb4\106\uffb4\107" +
    "\uffb4\110\uffb4\111\uffb4\112\uffb4\115\uffb4\122\uffb4\124\uffb4" +
    "\125\uffb4\131\uffb4\142\uffb4\144\uffb4\146\uffb4\147\uffb4\151" +
    "\uffb4\154\uffb4\156\uffb4\001\002\000\066\006\uffb9\054\uffb9" +
    "\070\uffb9\071\uffb9\076\uffb9\100\uffb9\102\uffb9\104\uffb9\105" +
    "\uffb9\106\uffb9\107\uffb9\110\uffb9\111\uffb9\112\uffb9\115\uffb9" +
    "\122\uffb9\124\uffb9\125\uffb9\131\uffb9\142\uffb9\144\uffb9\146" +
    "\uffb9\147\uffb9\151\uffb9\154\uffb9\156\uffb9\001\002\000\066" +
    "\006\uffae\054\uffae\070\uffae\071\uffae\076\uffae\100\uffae\102" +
    "\uffae\104\uffae\105\uffae\106\uffae\107\uffae\110\uffae\111\uffae" +
    "\112\uffae\115\uffae\122\uffae\124\uffae\125\uffae\131\uffae\142" +
    "\uffae\144\uffae\146\uffae\147\uffae\151\uffae\154\uffae\156\uffae" +
    "\001\002\000\066\006\uffac\054\uffac\070\uffac\071\uffac\076" +
    "\uffac\100\uffac\102\uffac\104\uffac\105\uffac\106\uffac\107\uffac" +
    "\110\uffac\111\uffac\112\uffac\115\uffac\122\uffac\124\uffac\125" +
    "\uffac\131\uffac\142\uffac\144\uffac\146\uffac\147\uffac\151\uffac" +
    "\154\uffac\156\uffac\001\002\000\066\006\uffad\054\uffad\070" +
    "\uffad\071\uffad\076\uffad\100\uffad\102\uffad\104\uffad\105\uffad" +
    "\106\uffad\107\uffad\110\uffad\111\uffad\112\uffad\115\uffad\122" +
    "\uffad\124\uffad\125\uffad\131\uffad\142\uffad\144\uffad\146\uffad" +
    "\147\uffad\151\uffad\154\uffad\156\uffad\001\002\000\066\006" +
    "\uffb8\054\uffb8\070\uffb8\071\uffb8\076\uffb8\100\uffb8\102\uffb8" +
    "\104\uffb8\105\uffb8\106\uffb8\107\uffb8\110\uffb8\111\uffb8\112" +
    "\uffb8\115\uffb8\122\uffb8\124\uffb8\125\uffb8\131\uffb8\142\uffb8" +
    "\144\uffb8\146\uffb8\147\uffb8\151\uffb8\154\uffb8\156\uffb8\001" +
    "\002\000\066\006\uffa3\054\uffa3\070\uffa3\071\uffa3\076\uffa3" +
    "\100\uffa3\102\uffa3\104\uffa3\105\uffa3\106\uffa3\107\uffa3\110" +
    "\uffa3\111\uffa3\112\uffa3\115\uffa3\122\uffa3\124\uffa3\125\uffa3" +
    "\131\uffa3\142\uffa3\144\uffa3\146\uffa3\147\uffa3\151\uffa3\154" +
    "\uffa3\156\uffa3\001\002\000\004\020\317\001\002\000\066" +
    "\006\uffb6\054\uffb6\070\uffb6\071\uffb6\076\uffb6\100\uffb6\102" +
    "\uffb6\104\uffb6\105\uffb6\106\uffb6\107\uffb6\110\uffb6\111\uffb6" +
    "\112\uffb6\115\uffb6\122\uffb6\124\uffb6\125\uffb6\131\uffb6\142" +
    "\uffb6\144\uffb6\146\uffb6\147\uffb6\151\uffb6\154\uffb6\156\uffb6" +
    "\001\002\000\066\006\uffb5\054\uffb5\070\uffb5\071\uffb5\076" +
    "\uffb5\100\uffb5\102\uffb5\104\uffb5\105\uffb5\106\uffb5\107\uffb5" +
    "\110\uffb5\111\uffb5\112\uffb5\115\uffb5\122\uffb5\124\uffb5\125" +
    "\uffb5\131\uffb5\142\uffb5\144\uffb5\146\uffb5\147\uffb5\151\uffb5" +
    "\154\uffb5\156\uffb5\001\002\000\066\006\uffa4\054\uffa4\070" +
    "\uffa4\071\uffa4\076\uffa4\100\uffa4\102\uffa4\104\uffa4\105\uffa4" +
    "\106\uffa4\107\uffa4\110\uffa4\111\uffa4\112\uffa4\115\uffa4\122" +
    "\uffa4\124\uffa4\125\uffa4\131\uffa4\142\uffa4\144\uffa4\146\uffa4" +
    "\147\uffa4\151\uffa4\154\uffa4\156\uffa4\001\002\000\066\006" +
    "\uffb3\054\uffb3\070\uffb3\071\uffb3\076\uffb3\100\uffb3\102\uffb3" +
    "\104\uffb3\105\uffb3\106\uffb3\107\uffb3\110\uffb3\111\uffb3\112" +
    "\uffb3\115\uffb3\122\uffb3\124\uffb3\125\uffb3\131\uffb3\142\uffb3" +
    "\144\uffb3\146\uffb3\147\uffb3\151\uffb3\154\uffb3\156\uffb3\001" +
    "\002\000\066\006\uffa0\054\uffa0\070\uffa0\071\uffa0\076\uffa0" +
    "\100\uffa0\102\uffa0\104\uffa0\105\uffa0\106\uffa0\107\uffa0\110" +
    "\uffa0\111\uffa0\112\uffa0\115\uffa0\122\uffa0\124\uffa0\125\uffa0" +
    "\131\uffa0\142\uffa0\144\uffa0\146\uffa0\147\uffa0\151\uffa0\154" +
    "\uffa0\156\uffa0\001\002\000\066\006\uffb0\054\uffb0\070\uffb0" +
    "\071\uffb0\076\uffb0\100\uffb0\102\uffb0\104\uffb0\105\uffb0\106" +
    "\uffb0\107\uffb0\110\uffb0\111\uffb0\112\uffb0\115\uffb0\122\uffb0" +
    "\124\uffb0\125\uffb0\131\uffb0\142\uffb0\144\uffb0\146\uffb0\147" +
    "\uffb0\151\uffb0\154\uffb0\156\uffb0\001\002\000\066\006\uffa6" +
    "\054\uffa6\070\uffa6\071\uffa6\076\uffa6\100\uffa6\102\uffa6\104" +
    "\uffa6\105\uffa6\106\uffa6\107\uffa6\110\uffa6\111\uffa6\112\uffa6" +
    "\115\uffa6\122\uffa6\124\uffa6\125\uffa6\131\uffa6\142\uffa6\144" +
    "\uffa6\146\uffa6\147\uffa6\151\uffa6\154\uffa6\156\uffa6\001\002" +
    "\000\066\006\uffb2\054\uffb2\070\uffb2\071\uffb2\076\uffb2\100" +
    "\uffb2\102\uffb2\104\uffb2\105\uffb2\106\uffb2\107\uffb2\110\uffb2" +
    "\111\uffb2\112\uffb2\115\uffb2\122\uffb2\124\uffb2\125\uffb2\131" +
    "\uffb2\142\uffb2\144\uffb2\146\uffb2\147\uffb2\151\uffb2\154\uffb2" +
    "\156\uffb2\001\002\000\066\006\uffb7\054\uffb7\070\uffb7\071" +
    "\uffb7\076\uffb7\100\uffb7\102\uffb7\104\uffb7\105\uffb7\106\uffb7" +
    "\107\uffb7\110\uffb7\111\uffb7\112\uffb7\115\uffb7\122\uffb7\124" +
    "\uffb7\125\uffb7\131\uffb7\142\uffb7\144\uffb7\146\uffb7\147\uffb7" +
    "\151\uffb7\154\uffb7\156\uffb7\001\002\000\066\006\uffaf\054" +
    "\uffaf\070\uffaf\071\uffaf\076\uffaf\100\uffaf\102\uffaf\104\uffaf" +
    "\105\uffaf\106\uffaf\107\uffaf\110\uffaf\111\uffaf\112\uffaf\115" +
    "\uffaf\122\uffaf\124\uffaf\125\uffaf\131\uffaf\142\uffaf\144\uffaf" +
    "\146\uffaf\147\uffaf\151\uffaf\154\uffaf\156\uffaf\001\002\000" +
    "\066\006\uffab\054\uffab\070\uffab\071\uffab\076\uffab\100\uffab" +
    "\102\uffab\104\uffab\105\uffab\106\uffab\107\uffab\110\uffab\111" +
    "\uffab\112\uffab\115\uffab\122\uffab\124\uffab\125\uffab\131\uffab" +
    "\142\uffab\144\uffab\146\uffab\147\uffab\151\uffab\154\uffab\156" +
    "\uffab\001\002\000\066\006\uffa8\054\uffa8\070\uffa8\071\uffa8" +
    "\076\uffa8\100\uffa8\102\uffa8\104\uffa8\105\uffa8\106\uffa8\107" +
    "\uffa8\110\uffa8\111\uffa8\112\uffa8\115\uffa8\122\uffa8\124\uffa8" +
    "\125\uffa8\131\uffa8\142\uffa8\144\uffa8\146\uffa8\147\uffa8\151" +
    "\uffa8\154\uffa8\156\uffa8\001\002\000\066\006\uffaa\054\uffaa" +
    "\070\uffaa\071\uffaa\076\uffaa\100\uffaa\102\uffaa\104\uffaa\105" +
    "\uffaa\106\uffaa\107\uffaa\110\uffaa\111\uffaa\112\uffaa\115\uffaa" +
    "\122\uffaa\124\uffaa\125\uffaa\131\uffaa\142\uffaa\144\uffaa\146" +
    "\uffaa\147\uffaa\151\uffaa\154\uffaa\156\uffaa\001\002\000\066" +
    "\006\uffb1\054\uffb1\070\uffb1\071\uffb1\076\uffb1\100\uffb1\102" +
    "\uffb1\104\uffb1\105\uffb1\106\uffb1\107\uffb1\110\uffb1\111\uffb1" +
    "\112\uffb1\115\uffb1\122\uffb1\124\uffb1\125\uffb1\131\uffb1\142" +
    "\uffb1\144\uffb1\146\uffb1\147\uffb1\151\uffb1\154\uffb1\156\uffb1" +
    "\001\002\000\006\006\013\156\015\001\002\000\066\006" +
    "\uffa2\054\uffa2\070\uffa2\071\uffa2\076\uffa2\100\uffa2\102\uffa2" +
    "\104\uffa2\105\uffa2\106\uffa2\107\uffa2\110\uffa2\111\uffa2\112" +
    "\uffa2\115\uffa2\122\uffa2\124\uffa2\125\uffa2\131\uffa2\142\uffa2" +
    "\144\uffa2\146\uffa2\147\uffa2\151\uffa2\154\uffa2\156\uffa2\001" +
    "\002\000\006\036\251\154\250\001\002\000\004\012\323" +
    "\001\002\000\004\136\324\001\002\000\004\014\325\001" +
    "\002\000\006\006\013\156\015\001\002\000\004\012\327" +
    "\001\002\000\004\065\330\001\002\000\004\014\331\001" +
    "\002\000\006\006\013\156\015\001\002\000\004\012\333" +
    "\001\002\000\006\134\335\135\334\001\002\000\004\014" +
    "\341\001\002\000\004\014\336\001\002\000\022\025\133" +
    "\026\132\027\130\031\131\041\125\042\127\043\126\052" +
    "\134\001\002\000\010\013\340\121\137\141\136\001\002" +
    "\000\010\012\ufff1\013\ufff1\153\ufff1\001\002\000\022\025" +
    "\133\026\132\027\130\031\131\041\125\042\127\043\126" +
    "\052\134\001\002\000\010\012\343\121\137\141\136\001" +
    "\002\000\004\134\344\001\002\000\004\014\345\001\002" +
    "\000\022\025\133\026\132\027\130\031\131\041\125\042" +
    "\127\043\126\052\134\001\002\000\010\013\347\121\137" +
    "\141\136\001\002\000\010\012\ufff2\013\ufff2\153\ufff2\001" +
    "\002\000\006\053\054\154\052\001\002\000\004\012\352" +
    "\001\002\000\006\006\013\156\015\001\002\000\004\012" +
    "\354\001\002\000\004\135\355\001\002\000\004\014\356" +
    "\001\002\000\006\006\013\156\015\001\002\000\004\012" +
    "\360\001\002\000\004\134\361\001\002\000\004\014\362" +
    "\001\002\000\006\006\013\156\015\001\002\000\006\012" +
    "\365\013\364\001\002\000\010\012\uffe9\013\uffe9\153\uffe9" +
    "\001\002\000\006\006\013\156\015\001\002\000\004\013" +
    "\367\001\002\000\010\012\uffea\013\uffea\153\uffea\001\002" +
    "\000\006\021\207\154\205\001\002\000\004\012\372\001" +
    "\002\000\006\006\013\156\015\001\002\000\004\013\374" +
    "\001\002\000\010\012\uffe2\013\uffe2\153\uffe2\001\002\000" +
    "\006\021\207\154\205\001\002\000\004\012\377\001\002" +
    "\000\006\006\013\156\015\001\002\000\004\012\u0101\001" +
    "\002\000\004\140\u0102\001\002\000\004\014\u0103\001\002" +
    "\000\022\025\133\026\132\027\130\031\131\041\125\042" +
    "\127\043\126\052\134\001\002\000\010\013\u0105\121\137" +
    "\141\136\001\002\000\010\012\uffe1\013\uffe1\153\uffe1\001" +
    "\002\000\006\036\251\154\250\001\002\000\004\012\u0108" +
    "\001\002\000\006\006\013\156\015\001\002\000\004\012" +
    "\u010a\001\002\000\004\015\u010b\001\002\000\010\006\013" +
    "\016\uffd1\156\015\001\002\000\004\016\u010d\001\002\000" +
    "\004\013\u010e\001\002\000\010\012\ufff3\013\ufff3\153\ufff3" +
    "\001\002\000\006\036\251\154\250\001\002\000\004\012" +
    "\u0111\001\002\000\006\006\013\156\015\001\002\000\004" +
    "\012\u0113\001\002\000\006\134\u0115\135\u0114\001\002\000" +
    "\004\014\u0119\001\002\000\004\014\u0116\001\002\000\022" +
    "\025\133\026\132\027\130\031\131\041\125\042\127\043" +
    "\126\052\134\001\002\000\010\013\u0118\121\137\141\136" +
    "\001\002\000\010\012\ufff4\013\ufff4\153\ufff4\001\002\000" +
    "\022\025\133\026\132\027\130\031\131\041\125\042\127" +
    "\043\126\052\134\001\002\000\010\012\u011b\121\137\141" +
    "\136\001\002\000\004\134\u011c\001\002\000\004\014\u011d" +
    "\001\002\000\022\025\133\026\132\027\130\031\131\041" +
    "\125\042\127\043\126\052\134\001\002\000\010\013\u011f" +
    "\121\137\141\136\001\002\000\010\012\ufff5\013\ufff5\153" +
    "\ufff5\001\002\000\006\021\207\154\205\001\002\000\004" +
    "\012\u0122\001\002\000\004\015\u0123\001\002\000\012\006" +
    "\013\016\uffbc\155\u0126\156\015\001\002\000\014\006\u0134" +
    "\007\u0133\063\u0136\073\u0135\075\u0132\001\002\000\004\016" +
    "\u0130\001\002\000\004\006\u012a\001\002\000\006\012\u0128" +
    "\016\uffbb\001\002\000\012\006\013\016\uffbc\155\u0126\156" +
    "\015\001\002\000\004\016\uffba\001\002\000\006\006\013" +
    "\156\015\001\002\000\004\006\u012c\001\002\000\004\155" +
    "\u012d\001\002\000\004\103\u012e\001\002\000\006\006\013" +
    "\156\015\001\002\000\006\012\uffbd\016\uffbd\001\002\000" +
    "\004\013\u0131\001\002\000\010\012\uffe0\013\uffe0\153\uffe0" +
    "\001\002\000\006\012\uffc2\016\uffc2\001\002\000\004\155" +
    "\u013a\001\002\000\004\155\u0137\001\002\000\006\012\uffc1" +
    "\016\uffc1\001\002\000\006\012\uffc0\016\uffc0\001\002\000" +
    "\004\103\u0138\001\002\000\006\006\013\156\015\001\002" +
    "\000\006\012\uffbe\016\uffbe\001\002\000\004\103\u013b\001" +
    "\002\000\006\006\013\156\015\001\002\000\006\012\uffbf" +
    "\016\uffbf\001\002\000\004\007\u013e\001\002\000\114\006" +
    "\uff86\007\uff86\012\uff86\013\uff86\016\uff86\020\uff86\054\uff86" +
    "\061\uff86\063\uff86\070\uff86\071\uff86\073\uff86\075\uff86\076" +
    "\uff86\100\uff86\102\uff86\104\uff86\105\uff86\106\uff86\107\uff86" +
    "\110\uff86\111\uff86\112\uff86\115\uff86\121\uff86\122\uff86\124" +
    "\uff86\125\uff86\131\uff86\141\uff86\142\uff86\144\uff86\146\uff86" +
    "\147\uff86\151\uff86\154\uff86\156\uff86\001\002\000\004\005" +
    "\u0140\001\002\000\004\006\u0141\001\002\000\004\157\u0142" +
    "\001\002\000\004\007\u0143\001\002\000\004\010\u0144\001" +
    "\002\000\010\002\uffff\004\uffff\035\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0142\000\006\002\004\004\003\001\001\000\004\003" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\005\033\006\030\007\027" +
    "\011\036\012\044\013\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\245\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\157\001\001\000\002\001\001\000\004\021\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\057\024\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\057\024" +
    "\061\001\001\000\002\001\001\000\004\031\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\140\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\150\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\162\001\001\000\002\001\001\000\004\011\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\165\001\001\000\002\001\001\000\004" +
    "\032\167\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\015\172\016\174\032\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\200\001\001\000\002\001\001" +
    "\000\010\015\172\016\202\032\173\001\001\000\002\001" +
    "\001\000\004\022\205\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\023\057\024\210\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\213" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\216\001\001\000\002\001\001\000\004\032\220\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\225\001\001\000\002\001\001" +
    "\000\004\032\227\001\001\000\002\001\001\000\004\032" +
    "\231\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\236\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\240\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\057\024\243\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\251\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\253\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\057\024\256\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\263\001\001" +
    "\000\016\005\033\006\030\007\027\011\036\012\044\013" +
    "\262\001\001\000\002\001\001\000\006\027\304\032\277" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\317\001\001\000\002\001\001\000" +
    "\004\020\321\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\325\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\331" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\336\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\341\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\345\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\350\001\001\000\002\001\001\000\004\032\352" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\356\032\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\362\032" +
    "\173\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\365\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\370\001\001\000\002\001\001\000\004\032\372" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\375\001\001\000\002\001\001\000\004\032\377\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\u0103\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\u0106\001\001\000\002\001\001\000\004\032" +
    "\u0108\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\015\172\016\u010b\032\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\u010f\001\001" +
    "\000\002\001\001\000\004\032\u0111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\u0116\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\u0119\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\u011d\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\u0120\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\025\u0126\026" +
    "\u0124\032\u0123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\025\u0126\026" +
    "\u0128\032\u0123\001\001\000\002\001\001\000\004\032\u012a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\u012e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\u0138\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\u013b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public net.lemonmodel.patterns.parser.Absyn.Statements pStatements() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (net.lemonmodel.patterns.parser.Absyn.Statements) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // URI ::= _SYMB_2 FullURI _SYMB_3 
            {
              net.lemonmodel.patterns.parser.Absyn.URI RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EURI(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URI",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // URI ::= _IDENT_ _SYMB_1 _IDENT_ 
            {
              net.lemonmodel.patterns.parser.Absyn.URI RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EQName(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URI",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // POSTag ::= _STRING_ 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAnyPOS(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // POSTag ::= _SYMB_102 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EVerbPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // POSTag ::= _SYMB_97 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESlashPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // POSTag ::= _SYMB_95 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESemiColonPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // POSTag ::= _SYMB_91 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPunctuationPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // POSTag ::= _SYMB_87 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPronounPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // POSTag ::= _SYMB_84 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPrepositionPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // POSTag ::= _SYMB_83 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPostpositionPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // POSTag ::= _SYMB_82 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPointPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // POSTag ::= _SYMB_79 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EParticlePOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // POSTag ::= _SYMB_76 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENumeralPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // POSTag ::= _SYMB_75 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENounPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // POSTag ::= _SYMB_72 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EInterjectionPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // POSTag ::= _SYMB_59 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDeterminerPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // POSTag ::= _SYMB_56 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ECopulaPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // POSTag ::= _SYMB_54 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConjunctionPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // POSTag ::= _SYMB_51 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ECommaPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // POSTag ::= _SYMB_50 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EColonPOSPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // POSTag ::= _SYMB_48 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ECircumpositionPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // POSTag ::= _SYMB_46 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EBulletPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // POSTag ::= _SYMB_44 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EArticlePOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // POSTag ::= _SYMB_43 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAdverbPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // POSTag ::= _SYMB_42 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAdpositionPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // POSTag ::= _SYMB_41 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAdjectivePOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ListCategory ::= ListCategory Category 
            {
              net.lemonmodel.patterns.parser.Absyn.ListCategory RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListCategory p_1 = (net.lemonmodel.patterns.parser.Absyn.ListCategory)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.Category p_2 = (net.lemonmodel.patterns.parser.Absyn.Category)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCategory",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ListCategory ::= 
            {
              net.lemonmodel.patterns.parser.Absyn.ListCategory RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListCategory(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCategory",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Category ::= URI _SYMB_12 URI 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_3 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAnyCat(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Category ::= _SYMB_78 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EParticiple(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Category ::= _SYMB_70 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EInfinitive(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Category ::= _SYMB_66 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EGerundive(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Category ::= _SYMB_53 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConditional(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Category ::= _SYMB_98 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESubjunctive(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Category ::= _SYMB_69 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EIndicative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Category ::= _SYMB_67 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EImperative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Category ::= _SYMB_68 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EImperfect(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Category ::= _SYMB_101 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EThirdPerson(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Category ::= _SYMB_94 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESecondPerson(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Category ::= _SYMB_62 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EFirstPerson(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Category ::= _SYMB_64 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EFuture(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Category ::= _SYMB_80 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPast(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Category ::= _SYMB_85 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPresent(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Category ::= _SYMB_99 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESuperlative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Category ::= _SYMB_52 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EComparative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Category ::= _SYMB_58 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Category ::= _SYMB_65 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EGenitive(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Category ::= _SYMB_40 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAccusative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Category ::= _SYMB_73 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENominative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Category ::= _SYMB_81 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPlural(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Category ::= _SYMB_60 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDual(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Category ::= _SYMB_96 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESingular(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ListScalarMembership ::= ScalarMembership _SYMB_6 ListScalarMembership 
            {
              net.lemonmodel.patterns.parser.Absyn.ListScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.ScalarMembership p_1 = (net.lemonmodel.patterns.parser.Absyn.ScalarMembership)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.ListScalarMembership p_3 = (net.lemonmodel.patterns.parser.Absyn.ListScalarMembership)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListScalarMembership",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ListScalarMembership ::= ScalarMembership 
            {
              net.lemonmodel.patterns.parser.Absyn.ListScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.ScalarMembership p_1 = (net.lemonmodel.patterns.parser.Absyn.ScalarMembership)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListScalarMembership(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListScalarMembership",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ListScalarMembership ::= 
            {
              net.lemonmodel.patterns.parser.Absyn.ListScalarMembership RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListScalarMembership(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListScalarMembership",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ScalarMembership ::= _DOUBLE_ _SYMB_2 URI _SYMB_2 _DOUBLE_ _SYMB_63 URI 
            {
              net.lemonmodel.patterns.parser.Absyn.ScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_3 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double p_5 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_7 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.BoundedScalarMembership(p_1,p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarMembership",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ScalarMembership ::= URI _SYMB_2 _DOUBLE_ _SYMB_63 URI 
            {
              net.lemonmodel.patterns.parser.Absyn.ScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double p_3 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.LessThanScalarMembership(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarMembership",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ScalarMembership ::= URI _SYMB_3 _DOUBLE_ _SYMB_63 URI 
            {
              net.lemonmodel.patterns.parser.Absyn.ScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double p_3 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.GreaterThanScalarMembership(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarMembership",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ScalarMembership ::= URI _SYMB_47 
            {
              net.lemonmodel.patterns.parser.Absyn.ScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.CentralScalarMembership(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarMembership",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ScalarMembership ::= URI _SYMB_55 
            {
              net.lemonmodel.patterns.parser.Absyn.ScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ContravariantScalarMembership(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarMembership",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ScalarMembership ::= URI _SYMB_57 
            {
              net.lemonmodel.patterns.parser.Absyn.ScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.CovariantScalarMembership(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarMembership",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ListPOSTaggedWord ::= POSTaggedWord _SYMB_6 ListPOSTaggedWord 
            {
              net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.POSTaggedWord p_1 = (net.lemonmodel.patterns.parser.Absyn.POSTaggedWord)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord p_3 = (net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPOSTaggedWord",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ListPOSTaggedWord ::= POSTaggedWord 
            {
              net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.POSTaggedWord p_1 = (net.lemonmodel.patterns.parser.Absyn.POSTaggedWord)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPOSTaggedWord",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ListPOSTaggedWord ::= 
            {
              net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPOSTaggedWord",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // POSTaggedWord ::= _STRING_ _SYMB_11 POSTag 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTaggedWord RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.POSTag p_3 = (net.lemonmodel.patterns.parser.Absyn.POSTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPOSTaggedWord(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTaggedWord",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // AP ::= _SYMB_13 _SYMB_5 ListPOSTaggedWord _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.AP RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord p_3 = (net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAPComplex(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // AP ::= _STRING_ 
            {
              net.lemonmodel.patterns.parser.Absyn.AP RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAPSimple(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VP ::= _SYMB_39 _SYMB_5 ListPOSTaggedWord _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.VP RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord p_3 = (net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EVPComplex(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VP ::= _STRING_ 
            {
              net.lemonmodel.patterns.parser.Absyn.VP RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EVPSimple(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NP ::= _SYMB_26 _SYMB_5 ListPOSTaggedWord _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.NP RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord p_3 = (net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENPComplex(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NP ::= _STRING_ 
            {
              net.lemonmodel.patterns.parser.Absyn.NP RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENPSimple(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PNP ::= _SYMB_28 _SYMB_5 ListPOSTaggedWord _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.PNP RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord p_3 = (net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPNPComplex(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PNP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PNP ::= _STRING_ 
            {
              net.lemonmodel.patterns.parser.Absyn.PNP RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPNPSimple(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PNP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ListOntologyFrameElement ::= OntologyFrameElement _SYMB_6 ListOntologyFrameElement 
            {
              net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_1 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement p_3 = (net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListOntologyFrameElement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ListOntologyFrameElement ::= OntologyFrameElement 
            {
              net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_1 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListOntologyFrameElement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ListOntologyFrameElement ::= 
            {
              net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListOntologyFrameElement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OntologyFrameElement ::= URI _SYMB_45 Arg 
            {
              net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_3 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EURIAsSynArg(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OntologyFrameElement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Arg ::= _SYMB_29 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPossessiveAdjunct(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Arg ::= _SYMB_30 _SYMB_5 _STRING_ _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPostpositionalObject(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Arg ::= _SYMB_31 _SYMB_5 _STRING_ _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPrepositionalObject(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Arg ::= _SYMB_18 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ECopulativeSubject(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Arg ::= _SYMB_17 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ECopulativeArg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Arg ::= _SYMB_21 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EIndirectObject(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Arg ::= _SYMB_19 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDirectObject(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Arg ::= _SYMB_38 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESubject(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Arg ::= Arg _SYMB_93 URI 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_1 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_3 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ERestrictedArg(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Arg ::= Arg _SYMB_77 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_1 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EOptionalArg(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ListPattern ::= Pattern _SYMB_6 ListPattern 
            {
              net.lemonmodel.patterns.parser.Absyn.ListPattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.Pattern p_1 = (net.lemonmodel.patterns.parser.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.ListPattern p_3 = (net.lemonmodel.patterns.parser.Absyn.ListPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPattern",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ListPattern ::= Pattern 
            {
              net.lemonmodel.patterns.parser.Absyn.ListPattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.Pattern p_1 = (net.lemonmodel.patterns.parser.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPattern",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ListPattern ::= 
            {
              net.lemonmodel.patterns.parser.Absyn.ListPattern RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListPattern(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPattern",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // AdjectivePattern ::= _SYMB_36 _SYMB_5 AP _SYMB_6 _SYMB_9 ListScalarMembership _SYMB_10 _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.AdjectivePattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.AP p_3 = (net.lemonmodel.patterns.parser.Absyn.AP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.ListScalarMembership p_6 = (net.lemonmodel.patterns.parser.Absyn.ListScalarMembership)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EScalarAdjective(p_3,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdjectivePattern",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // AdjectivePattern ::= _SYMB_33 _SYMB_5 AP _SYMB_6 URI _SYMB_6 _SYMB_92 _SYMB_8 Arg _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.AdjectivePattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.AP p_3 = (net.lemonmodel.patterns.parser.Absyn.AP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_9 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ERelationalAdjective(p_3,p_5,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdjectivePattern",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // AdjectivePattern ::= _SYMB_32 _SYMB_5 AP _SYMB_6 URI _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.AdjectivePattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.AP p_3 = (net.lemonmodel.patterns.parser.Absyn.AP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPropertyModifyingAdjective(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdjectivePattern",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // AdjectivePattern ::= _SYMB_23 _SYMB_5 AP _SYMB_6 URI _SYMB_6 _STRING_ _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.AdjectivePattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.AP p_3 = (net.lemonmodel.patterns.parser.Absyn.AP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EIntersectiveDataPropertyAdjective(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdjectivePattern",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // AdjectivePattern ::= _SYMB_24 _SYMB_5 AP _SYMB_6 URI _SYMB_6 URI _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.AdjectivePattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.AP p_3 = (net.lemonmodel.patterns.parser.Absyn.AP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_7 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EIntersectiveObjectPropertyAdjective(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdjectivePattern",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // AdjectivePattern ::= _SYMB_22 _SYMB_5 AP _SYMB_6 URI _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.AdjectivePattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.AP p_3 = (net.lemonmodel.patterns.parser.Absyn.AP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EIntersectiveAdjective(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdjectivePattern",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VerbPattern3 ::= _SYMB_20 _SYMB_5 VP _SYMB_6 URI _SYMB_6 _SYMB_9 ListOntologyFrameElement _SYMB_10 _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement p_8 = (net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EEventVerb(p_3,p_5,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern3",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VerbPattern2 ::= _SYMB_71 VerbPattern3 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.VerbPattern p_2 = (net.lemonmodel.patterns.parser.Absyn.VerbPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EInstantEventVerb(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VerbPattern2 ::= _SYMB_61 VerbPattern3 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.VerbPattern p_2 = (net.lemonmodel.patterns.parser.Absyn.VerbPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDurativeEventVerb(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VerbPattern ::= _SYMB_16 _SYMB_5 VP _SYMB_6 URI _SYMB_6 _SYMB_89 _SYMB_8 OntologyFrameElement _SYMB_6 _SYMB_88 _SYMB_8 OntologyFrameElement _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_9 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_13left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_13right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_13 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConsequenceVerb2(p_3,p_5,p_9,p_13); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VerbPattern ::= _SYMB_16 _SYMB_5 VP _SYMB_6 URI _SYMB_6 _SYMB_89 _SYMB_8 OntologyFrameElement _SYMB_6 _SYMB_88 _SYMB_8 OntologyFrameElement _SYMB_6 URI _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_9 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_13left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_13right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_13 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_15left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_15right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_15 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConsequenceVerb1(p_3,p_5,p_9,p_13,p_15); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VerbPattern ::= VerbPattern3 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.VerbPattern p_1 = (net.lemonmodel.patterns.parser.Absyn.VerbPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDunnotelicEventVerb(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VerbPattern ::= _SYMB_74 VerbPattern2 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.VerbPattern p_2 = (net.lemonmodel.patterns.parser.Absyn.VerbPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENontelicEventVerb(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VerbPattern ::= _SYMB_100 VerbPattern2 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.VerbPattern p_2 = (net.lemonmodel.patterns.parser.Absyn.VerbPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ETelicEventVerb(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VerbPattern ::= _SYMB_37 _SYMB_5 VP _SYMB_6 URI _SYMB_6 _SYMB_89 _SYMB_8 Arg _SYMB_6 _SYMB_86 _SYMB_8 Arg _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_9 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_13left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_13right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_13 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EStateVerb3(p_3,p_5,p_9,p_13); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VerbPattern ::= _SYMB_37 _SYMB_5 VP _SYMB_6 URI _SYMB_6 _SYMB_88 _SYMB_8 Arg _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_9 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EStateVerb2(p_3,p_5,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VerbPattern ::= _SYMB_37 _SYMB_5 VP _SYMB_6 URI _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EStateVerb1(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NounPattern ::= _SYMB_15 _SYMB_5 NP _SYMB_6 _SYMB_90 _SYMB_8 URI _SYMB_6 _SYMB_49 _SYMB_8 URI _SYMB_6 _SYMB_88 _SYMB_8 Arg _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		net.lemonmodel.patterns.parser.Absyn.NP p_3 = (net.lemonmodel.patterns.parser.Absyn.NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_7 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_11left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_11right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_11 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_15left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_15right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_15 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EClassRelationalNoun2(p_3,p_7,p_11,p_15); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NounPattern ::= _SYMB_15 _SYMB_5 NP _SYMB_6 _SYMB_90 _SYMB_8 URI _SYMB_6 _SYMB_49 _SYMB_8 URI _SYMB_6 _SYMB_89 _SYMB_8 Arg _SYMB_6 _SYMB_88 _SYMB_8 Arg _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		net.lemonmodel.patterns.parser.Absyn.NP p_3 = (net.lemonmodel.patterns.parser.Absyn.NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_7 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int p_11left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_11right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_11 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_15left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_15right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_15 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_19left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_19right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_19 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EClassRelationalNoun1(p_3,p_7,p_11,p_15,p_19); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NounPattern ::= _SYMB_34 _SYMB_5 NP _SYMB_6 URI _SYMB_6 _SYMB_9 ListOntologyFrameElement _SYMB_10 _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.NP p_3 = (net.lemonmodel.patterns.parser.Absyn.NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement p_8 = (net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ERelationalMultivalentNoun(p_3,p_5,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NounPattern ::= _SYMB_35 _SYMB_5 NP _SYMB_6 URI _SYMB_6 _SYMB_88 _SYMB_8 Arg _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.NP p_3 = (net.lemonmodel.patterns.parser.Absyn.NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_9 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ERelationalNoun2(p_3,p_5,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NounPattern ::= _SYMB_35 _SYMB_5 NP _SYMB_6 URI _SYMB_6 _SYMB_89 _SYMB_8 Arg _SYMB_6 _SYMB_88 _SYMB_8 Arg _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		net.lemonmodel.patterns.parser.Absyn.NP p_3 = (net.lemonmodel.patterns.parser.Absyn.NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_9 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_13left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_13right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_13 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ERelationalNoun1(p_3,p_5,p_9,p_13); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NounPattern ::= _SYMB_14 _SYMB_5 NP _SYMB_6 URI _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.NP p_3 = (net.lemonmodel.patterns.parser.Absyn.NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EClassNoun(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NounPattern ::= _SYMB_27 _SYMB_5 PNP _SYMB_6 URI _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.PNP p_3 = (net.lemonmodel.patterns.parser.Absyn.PNP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EName(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Pattern ::= AdjectivePattern 
            {
              net.lemonmodel.patterns.parser.Absyn.Pattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.AdjectivePattern p_1 = (net.lemonmodel.patterns.parser.Absyn.AdjectivePattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAdjective(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Pattern ::= VerbPattern 
            {
              net.lemonmodel.patterns.parser.Absyn.Pattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.VerbPattern p_1 = (net.lemonmodel.patterns.parser.Absyn.VerbPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EVerb(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Pattern ::= NounPattern 
            {
              net.lemonmodel.patterns.parser.Absyn.Pattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.NounPattern p_1 = (net.lemonmodel.patterns.parser.Absyn.NounPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENoun(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Pattern ::= Pattern _SYMB_103 ListCategory _STRING_ 
            {
              net.lemonmodel.patterns.parser.Absyn.Pattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.Pattern p_1 = (net.lemonmodel.patterns.parser.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListCategory p_3 = (net.lemonmodel.patterns.parser.Absyn.ListCategory)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPatternWithForm(p_1,p_3,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListStatement ::= ListStatement Statement 
            {
              net.lemonmodel.patterns.parser.Absyn.ListStatement RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListStatement p_1 = (net.lemonmodel.patterns.parser.Absyn.ListStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.Statement p_2 = (net.lemonmodel.patterns.parser.Absyn.Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStatement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListStatement ::= 
            {
              net.lemonmodel.patterns.parser.Absyn.ListStatement RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListStatement(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStatement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Statement ::= _SYMB_25 _SYMB_5 URI _SYMB_6 _STRING_ _SYMB_6 ListPattern _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.Statement RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_3 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListPattern p_7 = (net.lemonmodel.patterns.parser.Absyn.ListPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ELexicon(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Statement ::= _SYMB_0 _IDENT_ _SYMB_1 _SYMB_2 FullURI _SYMB_3 _SYMB_4 
            {
              net.lemonmodel.patterns.parser.Absyn.Statement RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p_5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPrefix(p_2,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Statements ::= ListStatement 
            {
              net.lemonmodel.patterns.parser.Absyn.Statements RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.ListStatement p_1 = (net.lemonmodel.patterns.parser.Absyn.ListStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EStatments(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Statements EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Statements start_val = (net.lemonmodel.patterns.parser.Absyn.Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

