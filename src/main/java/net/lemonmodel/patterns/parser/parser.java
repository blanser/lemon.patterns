
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Aug 07 17:52:45 CEST 2013
//----------------------------------------------------

package net.lemonmodel.patterns.parser;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Aug 07 17:52:45 CEST 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\211\000\002\002\004\000\002\002\003\000\002\003" +
    "\007\000\002\003\012\000\002\004\002\000\002\004\004" +
    "\000\002\005\006\000\002\005\003\000\002\005\004\000" +
    "\002\005\003\000\002\005\003\000\002\006\010\000\002" +
    "\006\010\000\002\006\020\000\002\006\014\000\002\006" +
    "\014\000\002\006\026\000\002\006\022\000\002\007\010" +
    "\000\002\007\014\000\002\007\020\000\002\007\004\000" +
    "\002\007\004\000\002\007\003\000\002\007\022\000\002" +
    "\007\020\000\002\007\016\000\002\007\014\000\002\007" +
    "\016\000\002\007\014\000\002\007\013\000\002\007\011" +
    "\000\002\010\004\000\002\010\004\000\002\011\014\000" +
    "\002\012\010\000\002\012\012\000\002\012\012\000\002" +
    "\012\010\000\002\012\014\000\002\012\012\000\002\013" +
    "\002\000\002\013\003\000\002\013\005\000\002\014\004" +
    "\000\002\014\005\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\006\000\002\014\006\000\002\014\003\000\002\015" +
    "\005\000\002\015\003\000\002\016\002\000\002\016\003" +
    "\000\002\016\005\000\002\017\003\000\002\017\005\000" +
    "\002\020\003\000\002\020\005\000\002\021\003\000\002" +
    "\021\005\000\002\022\003\000\002\022\005\000\002\023" +
    "\005\000\002\024\002\000\002\024\004\000\002\025\004" +
    "\000\002\025\004\000\002\025\004\000\002\025\007\000" +
    "\002\025\007\000\002\025\011\000\002\026\002\000\002" +
    "\026\003\000\002\026\005\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\005\000\002" +
    "\030\002\000\002\030\004\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\033\005\000\002\033\004" +
    "\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u014f\000\010\002\ufffd\004\ufffd\034\ufffd\001\002\000" +
    "\010\002\000\004\007\034\011\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\004\156\u014e\001" +
    "\002\000\010\002\ufffc\004\ufffc\034\ufffc\001\002\000\004" +
    "\007\012\001\002\000\010\005\013\156\016\157\015\001" +
    "\002\000\004\156\u014d\001\002\000\004\010\021\001\002" +
    "\000\120\005\uff79\010\uff79\011\uff79\014\uff79\016\uff79\017" +
    "\uff79\020\uff79\050\uff79\055\uff79\057\uff79\065\uff79\066\uff79" +
    "\070\uff79\072\uff79\073\uff79\075\uff79\100\uff79\102\uff79\103" +
    "\uff79\104\uff79\105\uff79\106\uff79\107\uff79\110\uff79\115\uff79" +
    "\121\uff79\123\uff79\125\uff79\126\uff79\132\uff79\141\uff79\142" +
    "\uff79\144\uff79\146\uff79\147\uff79\151\uff79\154\uff79\156\uff79" +
    "\157\uff79\001\002\000\004\005\017\001\002\000\004\156" +
    "\020\001\002\000\120\005\uff7b\010\uff7b\011\uff7b\014\uff7b" +
    "\016\uff7b\017\uff7b\020\uff7b\050\uff7b\055\uff7b\057\uff7b\065" +
    "\uff7b\066\uff7b\070\uff7b\072\uff7b\073\uff7b\075\uff7b\100\uff7b" +
    "\102\uff7b\103\uff7b\104\uff7b\105\uff7b\106\uff7b\107\uff7b\110" +
    "\uff7b\115\uff7b\121\uff7b\123\uff7b\125\uff7b\126\uff7b\132\uff7b" +
    "\141\uff7b\142\uff7b\144\uff7b\146\uff7b\147\uff7b\151\uff7b\154" +
    "\uff7b\156\uff7b\157\uff7b\001\002\000\004\154\022\001\002" +
    "\000\004\010\023\001\002\000\044\011\uffd8\021\037\022" +
    "\036\023\034\027\033\031\046\032\045\033\044\035\043" +
    "\041\042\042\030\043\027\044\026\045\025\046\024\116" +
    "\040\150\051\001\002\000\004\007\u013b\001\002\000\004" +
    "\007\u011e\001\002\000\004\007\u010d\001\002\000\004\007" +
    "\u0104\001\002\000\004\007\373\001\002\000\010\010\ufff8" +
    "\011\ufff8\153\ufff8\001\002\000\022\010\ufffa\011\ufffa\064" +
    "\370\077\371\113\365\114\372\122\367\153\ufffa\001\002" +
    "\000\004\007\351\001\002\000\004\007\303\001\002\000" +
    "\010\010\243\011\uffd7\153\244\001\002\000\004\007\173" +
    "\001\002\000\004\007\162\001\002\000\006\076\052\111" +
    "\053\001\002\000\010\010\uffea\011\uffea\153\uffea\001\002" +
    "\000\004\007\154\001\002\000\004\007\143\001\002\000" +
    "\004\007\134\001\002\000\004\007\125\001\002\000\004" +
    "\007\060\001\002\000\010\010\ufff7\011\ufff7\153\ufff7\001" +
    "\002\000\004\011\057\001\002\000\006\076\052\111\053" +
    "\001\002\000\004\027\033\001\002\000\004\027\033\001" +
    "\002\000\010\010\uffec\011\uffec\153\uffec\001\002\000\010" +
    "\010\uffe0\011\uffe0\153\uffe0\001\002\000\010\010\uffe1\011" +
    "\uffe1\153\uffe1\001\002\000\010\002\ufffe\004\ufffe\034\ufffe" +
    "\001\002\000\006\013\063\154\061\001\002\000\004\010" +
    "\uffc0\001\002\000\004\010\122\001\002\000\006\014\uffbd" +
    "\154\uffbd\001\002\000\006\014\066\154\065\001\002\000" +
    "\004\015\070\001\002\000\004\010\uffbf\001\002\000\006" +
    "\014\uffbc\154\uffbc\001\002\000\062\051\121\052\120\053" +
    "\117\054\104\056\103\060\101\062\077\063\076\067\114" +
    "\071\112\074\107\112\105\117\102\120\100\124\115\127" +
    "\113\130\111\131\110\133\106\137\075\143\074\145\071" +
    "\152\116\154\072\001\002\000\006\014\uff83\154\uff83\001" +
    "\002\000\006\014\uff81\154\uff81\001\002\000\006\014\uffbe" +
    "\154\uffbe\001\002\000\006\014\uff84\154\uff84\001\002\000" +
    "\006\014\uff85\154\uff85\001\002\000\006\014\uff91\154\uff91" +
    "\001\002\000\006\014\uff92\154\uff92\001\002\000\006\014" +
    "\uff8b\154\uff8b\001\002\000\006\014\uff93\154\uff93\001\002" +
    "\000\006\014\uff8c\154\uff8c\001\002\000\006\014\uff94\154" +
    "\uff94\001\002\000\006\014\uff95\154\uff95\001\002\000\006" +
    "\014\uff8d\154\uff8d\001\002\000\006\014\uff86\154\uff86\001" +
    "\002\000\006\014\uff8e\154\uff8e\001\002\000\006\014\uff87" +
    "\154\uff87\001\002\000\006\014\uff88\154\uff88\001\002\000" +
    "\006\014\uff8f\154\uff8f\001\002\000\006\014\uff89\154\uff89" +
    "\001\002\000\006\014\uff90\154\uff90\001\002\000\006\014" +
    "\uff8a\154\uff8a\001\002\000\006\014\uff82\154\uff82\001\002" +
    "\000\006\014\uff96\154\uff96\001\002\000\006\014\uff97\154" +
    "\uff97\001\002\000\006\014\uff98\154\uff98\001\002\000\010" +
    "\005\013\156\016\157\015\001\002\000\004\011\124\001" +
    "\002\000\010\010\uffde\011\uffde\153\uffde\001\002\000\006" +
    "\013\063\154\061\001\002\000\004\010\127\001\002\000" +
    "\010\005\013\156\016\157\015\001\002\000\004\010\131" +
    "\001\002\000\004\154\132\001\002\000\004\011\133\001" +
    "\002\000\010\010\uffdc\011\uffdc\153\uffdc\001\002\000\006" +
    "\013\063\154\061\001\002\000\004\010\136\001\002\000" +
    "\010\005\013\156\016\157\015\001\002\000\004\010\140" +
    "\001\002\000\010\005\013\156\016\157\015\001\002\000" +
    "\004\011\142\001\002\000\010\010\uffdd\011\uffdd\153\uffdd" +
    "\001\002\000\006\013\146\154\144\001\002\000\004\010" +
    "\uffc6\001\002\000\004\010\151\001\002\000\006\014\uffbd" +
    "\154\uffbd\001\002\000\006\014\150\154\065\001\002\000" +
    "\004\010\uffc5\001\002\000\010\005\013\156\016\157\015" +
    "\001\002\000\004\011\153\001\002\000\022\010\ufff6\011" +
    "\ufff6\064\ufff6\077\ufff6\113\ufff6\114\ufff6\122\ufff6\153\ufff6" +
    "\001\002\000\006\013\063\154\061\001\002\000\004\010" +
    "\156\001\002\000\010\005\013\156\016\157\015\001\002" +
    "\000\004\011\160\001\002\000\010\010\uffdb\011\uffdb\153" +
    "\uffdb\001\002\000\010\010\uffeb\011\uffeb\153\uffeb\001\002" +
    "\000\006\013\164\154\163\001\002\000\004\010\uffc4\001" +
    "\002\000\006\014\uffbd\154\uffbd\001\002\000\004\010\166" +
    "\001\002\000\010\005\013\156\016\157\015\001\002\000" +
    "\004\011\170\001\002\000\022\010\ufff5\011\ufff5\064\ufff5" +
    "\077\ufff5\113\ufff5\114\ufff5\122\ufff5\153\ufff5\001\002\000" +
    "\006\014\172\154\065\001\002\000\004\010\uffc3\001\002" +
    "\000\006\013\164\154\163\001\002\000\004\010\175\001" +
    "\002\000\004\061\176\001\002\000\004\012\177\001\002" +
    "\000\010\005\013\156\016\157\015\001\002\000\004\010" +
    "\201\001\002\000\004\136\202\001\002\000\004\012\203" +
    "\001\002\000\010\005\013\156\016\157\015\001\002\000" +
    "\004\010\205\001\002\000\006\134\207\135\206\001\002" +
    "\000\004\012\234\001\002\000\004\012\210\001\002\000" +
    "\022\024\217\025\216\026\214\030\215\036\213\037\212" +
    "\040\211\047\220\001\002\000\004\007\231\001\002\000" +
    "\004\007\226\001\002\000\014\010\uffcc\011\uffcc\014\uffcc" +
    "\121\uffcc\141\uffcc\001\002\000\014\010\uffd2\011\uffd2\014" +
    "\uffd2\121\uffd2\141\uffd2\001\002\000\014\010\uffd1\011\uffd1" +
    "\014\uffd1\121\uffd1\141\uffd1\001\002\000\014\010\uffcf\011" +
    "\uffcf\014\uffcf\121\uffcf\141\uffcf\001\002\000\014\010\uffd0" +
    "\011\uffd0\014\uffd0\121\uffd0\141\uffd0\001\002\000\014\010" +
    "\uffd3\011\uffd3\014\uffd3\121\uffd3\141\uffd3\001\002\000\010" +
    "\011\224\121\223\141\222\001\002\000\010\005\013\156" +
    "\016\157\015\001\002\000\014\010\uffd5\011\uffd5\014\uffd5" +
    "\121\uffd5\141\uffd5\001\002\000\022\010\ufff0\011\ufff0\064" +
    "\ufff0\077\ufff0\113\ufff0\114\ufff0\122\ufff0\153\ufff0\001\002" +
    "\000\014\010\uffd4\011\uffd4\014\uffd4\121\uffd4\141\uffd4\001" +
    "\002\000\004\154\227\001\002\000\004\011\230\001\002" +
    "\000\014\010\uffcd\011\uffcd\014\uffcd\121\uffcd\141\uffcd\001" +
    "\002\000\004\154\232\001\002\000\004\011\233\001\002" +
    "\000\014\010\uffce\011\uffce\014\uffce\121\uffce\141\uffce\001" +
    "\002\000\022\024\217\025\216\026\214\030\215\036\213" +
    "\037\212\040\211\047\220\001\002\000\010\010\236\121" +
    "\223\141\222\001\002\000\004\134\237\001\002\000\004" +
    "\012\240\001\002\000\022\024\217\025\216\026\214\030" +
    "\215\036\213\037\212\040\211\047\220\001\002\000\010" +
    "\011\242\121\223\141\222\001\002\000\022\010\ufff1\011" +
    "\ufff1\064\ufff1\077\ufff1\113\ufff1\114\ufff1\122\ufff1\153\ufff1" +
    "\001\002\000\044\011\uffd8\021\037\022\036\023\034\027" +
    "\033\031\046\032\045\033\044\035\043\041\042\042\030" +
    "\043\027\044\026\045\025\046\024\116\040\150\051\001" +
    "\002\000\070\005\uff9a\050\uff9a\065\uff9a\066\uff9a\073\uff9a" +
    "\075\uff9a\100\uff9a\102\uff9a\103\uff9a\104\uff9a\105\uff9a\106" +
    "\uff9a\107\uff9a\110\uff9a\115\uff9a\123\uff9a\125\uff9a\126\uff9a" +
    "\132\uff9a\142\uff9a\144\uff9a\146\uff9a\147\uff9a\151\uff9a\154" +
    "\uff9a\156\uff9a\157\uff9a\001\002\000\070\005\013\050\247" +
    "\065\262\066\274\073\270\075\266\100\261\102\260\103" +
    "\256\104\255\105\254\106\251\107\246\110\276\115\265" +
    "\123\263\125\273\126\272\132\271\142\257\144\253\146" +
    "\250\147\277\151\275\154\252\156\016\157\015\001\002" +
    "\000\070\005\uffa1\050\uffa1\065\uffa1\066\uffa1\073\uffa1\075" +
    "\uffa1\100\uffa1\102\uffa1\103\uffa1\104\uffa1\105\uffa1\106\uffa1" +
    "\107\uffa1\110\uffa1\115\uffa1\123\uffa1\125\uffa1\126\uffa1\132" +
    "\uffa1\142\uffa1\144\uffa1\146\uffa1\147\uffa1\151\uffa1\154\uffa1" +
    "\156\uffa1\157\uffa1\001\002\000\070\005\uffae\050\uffae\065" +
    "\uffae\066\uffae\073\uffae\075\uffae\100\uffae\102\uffae\103\uffae" +
    "\104\uffae\105\uffae\106\uffae\107\uffae\110\uffae\115\uffae\123" +
    "\uffae\125\uffae\126\uffae\132\uffae\142\uffae\144\uffae\146\uffae" +
    "\147\uffae\151\uffae\154\uffae\156\uffae\157\uffae\001\002\000" +
    "\070\005\uffa0\050\uffa0\065\uffa0\066\uffa0\073\uffa0\075\uffa0" +
    "\100\uffa0\102\uffa0\103\uffa0\104\uffa0\105\uffa0\106\uffa0\107" +
    "\uffa0\110\uffa0\115\uffa0\123\uffa0\125\uffa0\126\uffa0\132\uffa0" +
    "\142\uffa0\144\uffa0\146\uffa0\147\uffa0\151\uffa0\154\uffa0\156" +
    "\uffa0\157\uffa0\001\002\000\070\005\uffa3\050\uffa3\065\uffa3" +
    "\066\uffa3\073\uffa3\075\uffa3\100\uffa3\102\uffa3\103\uffa3\104" +
    "\uffa3\105\uffa3\106\uffa3\107\uffa3\110\uffa3\115\uffa3\123\uffa3" +
    "\125\uffa3\126\uffa3\132\uffa3\142\uffa3\144\uffa3\146\uffa3\147" +
    "\uffa3\151\uffa3\154\uffa3\156\uffa3\157\uffa3\001\002\000\010" +
    "\010\ufffb\011\ufffb\153\ufffb\001\002\000\070\005\uffb2\050" +
    "\uffb2\065\uffb2\066\uffb2\073\uffb2\075\uffb2\100\uffb2\102\uffb2" +
    "\103\uffb2\104\uffb2\105\uffb2\106\uffb2\107\uffb2\110\uffb2\115" +
    "\uffb2\123\uffb2\125\uffb2\126\uffb2\132\uffb2\142\uffb2\144\uffb2" +
    "\146\uffb2\147\uffb2\151\uffb2\154\uffb2\156\uffb2\157\uffb2\001" +
    "\002\000\070\005\uffa2\050\uffa2\065\uffa2\066\uffa2\073\uffa2" +
    "\075\uffa2\100\uffa2\102\uffa2\103\uffa2\104\uffa2\105\uffa2\106" +
    "\uffa2\107\uffa2\110\uffa2\115\uffa2\123\uffa2\125\uffa2\126\uffa2" +
    "\132\uffa2\142\uffa2\144\uffa2\146\uffa2\147\uffa2\151\uffa2\154" +
    "\uffa2\156\uffa2\157\uffa2\001\002\000\070\005\uff9e\050\uff9e" +
    "\065\uff9e\066\uff9e\073\uff9e\075\uff9e\100\uff9e\102\uff9e\103" +
    "\uff9e\104\uff9e\105\uff9e\106\uff9e\107\uff9e\110\uff9e\115\uff9e" +
    "\123\uff9e\125\uff9e\126\uff9e\132\uff9e\142\uff9e\144\uff9e\146" +
    "\uff9e\147\uff9e\151\uff9e\154\uff9e\156\uff9e\157\uff9e\001\002" +
    "\000\070\005\uffad\050\uffad\065\uffad\066\uffad\073\uffad\075" +
    "\uffad\100\uffad\102\uffad\103\uffad\104\uffad\105\uffad\106\uffad" +
    "\107\uffad\110\uffad\115\uffad\123\uffad\125\uffad\126\uffad\132" +
    "\uffad\142\uffad\144\uffad\146\uffad\147\uffad\151\uffad\154\uffad" +
    "\156\uffad\157\uffad\001\002\000\070\005\uffa5\050\uffa5\065" +
    "\uffa5\066\uffa5\073\uffa5\075\uffa5\100\uffa5\102\uffa5\103\uffa5" +
    "\104\uffa5\105\uffa5\106\uffa5\107\uffa5\110\uffa5\115\uffa5\123" +
    "\uffa5\125\uffa5\126\uffa5\132\uffa5\142\uffa5\144\uffa5\146\uffa5" +
    "\147\uffa5\151\uffa5\154\uffa5\156\uffa5\157\uffa5\001\002\000" +
    "\070\005\uffa7\050\uffa7\065\uffa7\066\uffa7\073\uffa7\075\uffa7" +
    "\100\uffa7\102\uffa7\103\uffa7\104\uffa7\105\uffa7\106\uffa7\107" +
    "\uffa7\110\uffa7\115\uffa7\123\uffa7\125\uffa7\126\uffa7\132\uffa7" +
    "\142\uffa7\144\uffa7\146\uffa7\147\uffa7\151\uffa7\154\uffa7\156" +
    "\uffa7\157\uffa7\001\002\000\070\005\uffa6\050\uffa6\065\uffa6" +
    "\066\uffa6\073\uffa6\075\uffa6\100\uffa6\102\uffa6\103\uffa6\104" +
    "\uffa6\105\uffa6\106\uffa6\107\uffa6\110\uffa6\115\uffa6\123\uffa6" +
    "\125\uffa6\126\uffa6\132\uffa6\142\uffa6\144\uffa6\146\uffa6\147" +
    "\uffa6\151\uffa6\154\uffa6\156\uffa6\157\uffa6\001\002\000\070" +
    "\005\uffab\050\uffab\065\uffab\066\uffab\073\uffab\075\uffab\100" +
    "\uffab\102\uffab\103\uffab\104\uffab\105\uffab\106\uffab\107\uffab" +
    "\110\uffab\115\uffab\123\uffab\125\uffab\126\uffab\132\uffab\142" +
    "\uffab\144\uffab\146\uffab\147\uffab\151\uffab\154\uffab\156\uffab" +
    "\157\uffab\001\002\000\070\005\uff9c\050\uff9c\065\uff9c\066" +
    "\uff9c\073\uff9c\075\uff9c\100\uff9c\102\uff9c\103\uff9c\104\uff9c" +
    "\105\uff9c\106\uff9c\107\uff9c\110\uff9c\115\uff9c\123\uff9c\125" +
    "\uff9c\126\uff9c\132\uff9c\142\uff9c\144\uff9c\146\uff9c\147\uff9c" +
    "\151\uff9c\154\uff9c\156\uff9c\157\uff9c\001\002\000\004\020" +
    "\300\001\002\000\070\005\uffaf\050\uffaf\065\uffaf\066\uffaf" +
    "\073\uffaf\075\uffaf\100\uffaf\102\uffaf\103\uffaf\104\uffaf\105" +
    "\uffaf\106\uffaf\107\uffaf\110\uffaf\115\uffaf\123\uffaf\125\uffaf" +
    "\126\uffaf\132\uffaf\142\uffaf\144\uffaf\146\uffaf\147\uffaf\151" +
    "\uffaf\154\uffaf\156\uffaf\157\uffaf\001\002\000\070\005\uffb1" +
    "\050\uffb1\065\uffb1\066\uffb1\073\uffb1\075\uffb1\100\uffb1\102" +
    "\uffb1\103\uffb1\104\uffb1\105\uffb1\106\uffb1\107\uffb1\110\uffb1" +
    "\115\uffb1\123\uffb1\125\uffb1\126\uffb1\132\uffb1\142\uffb1\144" +
    "\uffb1\146\uffb1\147\uffb1\151\uffb1\154\uffb1\156\uffb1\157\uffb1" +
    "\001\002\000\070\005\uff99\050\uff99\065\uff99\066\uff99\073" +
    "\uff99\075\uff99\100\uff99\102\uff99\103\uff99\104\uff99\105\uff99" +
    "\106\uff99\107\uff99\110\uff99\115\uff99\123\uff99\125\uff99\126" +
    "\uff99\132\uff99\142\uff99\144\uff99\146\uff99\147\uff99\151\uff99" +
    "\154\uff99\156\uff99\157\uff99\001\002\000\070\005\uffac\050" +
    "\uffac\065\uffac\066\uffac\073\uffac\075\uffac\100\uffac\102\uffac" +
    "\103\uffac\104\uffac\105\uffac\106\uffac\107\uffac\110\uffac\115" +
    "\uffac\123\uffac\125\uffac\126\uffac\132\uffac\142\uffac\144\uffac" +
    "\146\uffac\147\uffac\151\uffac\154\uffac\156\uffac\157\uffac\001" +
    "\002\000\070\005\uffa9\050\uffa9\065\uffa9\066\uffa9\073\uffa9" +
    "\075\uffa9\100\uffa9\102\uffa9\103\uffa9\104\uffa9\105\uffa9\106" +
    "\uffa9\107\uffa9\110\uffa9\115\uffa9\123\uffa9\125\uffa9\126\uffa9" +
    "\132\uffa9\142\uffa9\144\uffa9\146\uffa9\147\uffa9\151\uffa9\154" +
    "\uffa9\156\uffa9\157\uffa9\001\002\000\070\005\uffb0\050\uffb0" +
    "\065\uffb0\066\uffb0\073\uffb0\075\uffb0\100\uffb0\102\uffb0\103" +
    "\uffb0\104\uffb0\105\uffb0\106\uffb0\107\uffb0\110\uffb0\115\uffb0" +
    "\123\uffb0\125\uffb0\126\uffb0\132\uffb0\142\uffb0\144\uffb0\146" +
    "\uffb0\147\uffb0\151\uffb0\154\uffb0\156\uffb0\157\uffb0\001\002" +
    "\000\070\005\uffa8\050\uffa8\065\uffa8\066\uffa8\073\uffa8\075" +
    "\uffa8\100\uffa8\102\uffa8\103\uffa8\104\uffa8\105\uffa8\106\uffa8" +
    "\107\uffa8\110\uffa8\115\uffa8\123\uffa8\125\uffa8\126\uffa8\132" +
    "\uffa8\142\uffa8\144\uffa8\146\uffa8\147\uffa8\151\uffa8\154\uffa8" +
    "\156\uffa8\157\uffa8\001\002\000\070\005\uff9f\050\uff9f\065" +
    "\uff9f\066\uff9f\073\uff9f\075\uff9f\100\uff9f\102\uff9f\103\uff9f" +
    "\104\uff9f\105\uff9f\106\uff9f\107\uff9f\110\uff9f\115\uff9f\123" +
    "\uff9f\125\uff9f\126\uff9f\132\uff9f\142\uff9f\144\uff9f\146\uff9f" +
    "\147\uff9f\151\uff9f\154\uff9f\156\uff9f\157\uff9f\001\002\000" +
    "\070\005\uffa4\050\uffa4\065\uffa4\066\uffa4\073\uffa4\075\uffa4" +
    "\100\uffa4\102\uffa4\103\uffa4\104\uffa4\105\uffa4\106\uffa4\107" +
    "\uffa4\110\uffa4\115\uffa4\123\uffa4\125\uffa4\126\uffa4\132\uffa4" +
    "\142\uffa4\144\uffa4\146\uffa4\147\uffa4\151\uffa4\154\uffa4\156" +
    "\uffa4\157\uffa4\001\002\000\070\005\uff9d\050\uff9d\065\uff9d" +
    "\066\uff9d\073\uff9d\075\uff9d\100\uff9d\102\uff9d\103\uff9d\104" +
    "\uff9d\105\uff9d\106\uff9d\107\uff9d\110\uff9d\115\uff9d\123\uff9d" +
    "\125\uff9d\126\uff9d\132\uff9d\142\uff9d\144\uff9d\146\uff9d\147" +
    "\uff9d\151\uff9d\154\uff9d\156\uff9d\157\uff9d\001\002\000\070" +
    "\005\uffaa\050\uffaa\065\uffaa\066\uffaa\073\uffaa\075\uffaa\100" +
    "\uffaa\102\uffaa\103\uffaa\104\uffaa\105\uffaa\106\uffaa\107\uffaa" +
    "\110\uffaa\115\uffaa\123\uffaa\125\uffaa\126\uffaa\132\uffaa\142" +
    "\uffaa\144\uffaa\146\uffaa\147\uffaa\151\uffaa\154\uffaa\156\uffaa" +
    "\157\uffaa\001\002\000\010\005\013\156\016\157\015\001" +
    "\002\000\070\005\uff9b\050\uff9b\065\uff9b\066\uff9b\073\uff9b" +
    "\075\uff9b\100\uff9b\102\uff9b\103\uff9b\104\uff9b\105\uff9b\106" +
    "\uff9b\107\uff9b\110\uff9b\115\uff9b\123\uff9b\125\uff9b\126\uff9b" +
    "\132\uff9b\142\uff9b\144\uff9b\146\uff9b\147\uff9b\151\uff9b\154" +
    "\uff9b\156\uff9b\157\uff9b\001\002\000\004\011\uffd6\001\002" +
    "\000\006\013\306\154\304\001\002\000\004\010\uffc2\001" +
    "\002\000\004\010\311\001\002\000\006\014\uffbd\154\uffbd" +
    "\001\002\000\006\014\310\154\065\001\002\000\004\010" +
    "\uffc1\001\002\000\010\005\013\156\016\157\015\001\002" +
    "\000\004\010\313\001\002\000\012\010\314\011\317\134" +
    "\316\135\315\001\002\000\010\005\013\156\016\157\015" +
    "\001\002\000\004\012\332\001\002\000\004\012\320\001" +
    "\002\000\010\010\uffe2\011\uffe2\153\uffe2\001\002\000\030" +
    "\005\013\024\217\025\216\026\214\030\215\036\213\037" +
    "\212\040\211\047\220\156\016\157\015\001\002\000\006" +
    "\010\326\011\327\001\002\000\004\055\324\001\002\000" +
    "\014\010\uffca\011\uffca\014\uffca\121\223\141\222\001\002" +
    "\000\022\024\217\025\216\026\214\030\215\036\213\037" +
    "\212\040\211\047\220\001\002\000\014\010\uffcb\011\uffcb" +
    "\014\uffcb\121\223\141\222\001\002\000\010\005\013\156" +
    "\016\157\015\001\002\000\010\010\uffe4\011\uffe4\153\uffe4" +
    "\001\002\000\004\011\331\001\002\000\010\010\uffe5\011" +
    "\uffe5\153\uffe5\001\002\000\030\005\013\024\217\025\216" +
    "\026\214\030\215\036\213\037\212\040\211\047\220\156" +
    "\016\157\015\001\002\000\006\010\334\011\335\001\002" +
    "\000\012\005\013\134\337\156\016\157\015\001\002\000" +
    "\010\010\uffe6\011\uffe6\153\uffe6\001\002\000\004\011\346" +
    "\001\002\000\004\012\340\001\002\000\030\005\013\024" +
    "\217\025\216\026\214\030\215\036\213\037\212\040\211" +
    "\047\220\156\016\157\015\001\002\000\006\010\342\011" +
    "\343\001\002\000\010\005\013\156\016\157\015\001\002" +
    "\000\010\010\uffe8\011\uffe8\153\uffe8\001\002\000\004\011" +
    "\345\001\002\000\010\010\uffe9\011\uffe9\153\uffe9\001\002" +
    "\000\010\010\uffe7\011\uffe7\153\uffe7\001\002\000\004\011" +
    "\350\001\002\000\010\010\uffe3\011\uffe3\153\uffe3\001\002" +
    "\000\006\013\306\154\304\001\002\000\004\010\353\001" +
    "\002\000\010\005\013\156\016\157\015\001\002\000\004" +
    "\010\355\001\002\000\004\013\356\001\002\000\032\005" +
    "\013\014\uffc9\024\217\025\216\026\214\030\215\036\213" +
    "\037\212\040\211\047\220\156\016\157\015\001\002\000" +
    "\006\010\363\014\uffc8\001\002\000\004\014\361\001\002" +
    "\000\004\011\362\001\002\000\010\010\uffdf\011\uffdf\153" +
    "\uffdf\001\002\000\032\005\013\014\uffc9\024\217\025\216" +
    "\026\214\030\215\036\213\037\212\040\211\047\220\156" +
    "\016\157\015\001\002\000\004\014\uffc7\001\002\000\010" +
    "\010\uff80\011\uff80\153\uff80\001\002\000\010\010\ufff9\011" +
    "\ufff9\153\ufff9\001\002\000\010\010\uff7c\011\uff7c\153\uff7c" +
    "\001\002\000\010\010\uff7d\011\uff7d\153\uff7d\001\002\000" +
    "\010\010\uff7f\011\uff7f\153\uff7f\001\002\000\010\010\uff7e" +
    "\011\uff7e\153\uff7e\001\002\000\006\013\063\154\061\001" +
    "\002\000\004\010\375\001\002\000\010\005\013\156\016" +
    "\157\015\001\002\000\004\010\377\001\002\000\004\140" +
    "\u0100\001\002\000\004\012\u0101\001\002\000\022\024\217" +
    "\025\216\026\214\030\215\036\213\037\212\040\211\047" +
    "\220\001\002\000\010\011\u0103\121\223\141\222\001\002" +
    "\000\010\010\uffda\011\uffda\153\uffda\001\002\000\006\013" +
    "\164\154\163\001\002\000\004\010\u0106\001\002\000\010" +
    "\005\013\156\016\157\015\001\002\000\004\010\u0108\001" +
    "\002\000\004\013\u0109\001\002\000\032\005\013\014\uffc9" +
    "\024\217\025\216\026\214\030\215\036\213\037\212\040" +
    "\211\047\220\156\016\157\015\001\002\000\004\014\u010b" +
    "\001\002\000\004\011\u010c\001\002\000\022\010\ufff2\011" +
    "\ufff2\064\ufff2\077\ufff2\113\ufff2\114\ufff2\122\ufff2\153\ufff2" +
    "\001\002\000\006\013\164\154\163\001\002\000\004\010" +
    "\u010f\001\002\000\010\005\013\156\016\157\015\001\002" +
    "\000\004\010\u0111\001\002\000\006\134\u0113\135\u0112\001" +
    "\002\000\004\012\u0117\001\002\000\004\012\u0114\001\002" +
    "\000\022\024\217\025\216\026\214\030\215\036\213\037" +
    "\212\040\211\047\220\001\002\000\010\011\u0116\121\223" +
    "\141\222\001\002\000\022\010\ufff3\011\ufff3\064\ufff3\077" +
    "\ufff3\113\ufff3\114\ufff3\122\ufff3\153\ufff3\001\002\000\022" +
    "\024\217\025\216\026\214\030\215\036\213\037\212\040" +
    "\211\047\220\001\002\000\010\010\u0119\121\223\141\222" +
    "\001\002\000\004\134\u011a\001\002\000\004\012\u011b\001" +
    "\002\000\022\024\217\025\216\026\214\030\215\036\213" +
    "\037\212\040\211\047\220\001\002\000\010\011\u011d\121" +
    "\223\141\222\001\002\000\022\010\ufff4\011\ufff4\064\ufff4" +
    "\077\ufff4\113\ufff4\114\ufff4\122\ufff4\153\ufff4\001\002\000" +
    "\006\013\063\154\061\001\002\000\004\010\u0120\001\002" +
    "\000\004\013\u0121\001\002\000\014\005\013\014\uffb5\155" +
    "\u0124\156\016\157\015\001\002\000\014\016\u0130\017\u0134" +
    "\057\u0131\070\u0133\072\u0132\001\002\000\004\014\u012e\001" +
    "\002\000\004\017\u0128\001\002\000\006\010\u0126\014\uffb4" +
    "\001\002\000\014\005\013\014\uffb5\155\u0124\156\016\157" +
    "\015\001\002\000\004\014\uffb3\001\002\000\010\005\013" +
    "\156\016\157\015\001\002\000\004\017\u012a\001\002\000" +
    "\004\155\u012b\001\002\000\004\101\u012c\001\002\000\010" +
    "\005\013\156\016\157\015\001\002\000\006\010\uffb6\014" +
    "\uffb6\001\002\000\004\011\u012f\001\002\000\010\010\uffd9" +
    "\011\uffd9\153\uffd9\001\002\000\004\155\u0138\001\002\000" +
    "\006\010\uffb9\014\uffb9\001\002\000\006\010\uffbb\014\uffbb" +
    "\001\002\000\006\010\uffba\014\uffba\001\002\000\004\155" +
    "\u0135\001\002\000\004\101\u0136\001\002\000\010\005\013" +
    "\156\016\157\015\001\002\000\006\010\uffb7\014\uffb7\001" +
    "\002\000\004\101\u0139\001\002\000\010\005\013\156\016" +
    "\157\015\001\002\000\006\010\uffb8\014\uffb8\001\002\000" +
    "\006\013\306\154\304\001\002\000\004\010\u013d\001\002" +
    "\000\010\005\013\156\016\157\015\001\002\000\006\010" +
    "\u013f\011\u0140\001\002\000\006\134\u0142\135\u0141\001\002" +
    "\000\010\010\uffef\011\uffef\153\uffef\001\002\000\004\012" +
    "\u0146\001\002\000\004\012\u0143\001\002\000\022\024\217" +
    "\025\216\026\214\030\215\036\213\037\212\040\211\047" +
    "\220\001\002\000\010\011\u0145\121\223\141\222\001\002" +
    "\000\010\010\uffee\011\uffee\153\uffee\001\002\000\022\024" +
    "\217\025\216\026\214\030\215\036\213\037\212\040\211" +
    "\047\220\001\002\000\010\010\u0148\121\223\141\222\001" +
    "\002\000\004\134\u0149\001\002\000\004\012\u014a\001\002" +
    "\000\022\024\217\025\216\026\214\030\215\036\213\037" +
    "\212\040\211\047\220\001\002\000\010\011\u014c\121\223" +
    "\141\222\001\002\000\010\010\uffed\011\uffed\153\uffed\001" +
    "\002\000\120\005\uff7a\010\uff7a\011\uff7a\014\uff7a\016\uff7a" +
    "\017\uff7a\020\uff7a\050\uff7a\055\uff7a\057\uff7a\065\uff7a\066" +
    "\uff7a\070\uff7a\072\uff7a\073\uff7a\075\uff7a\100\uff7a\102\uff7a" +
    "\103\uff7a\104\uff7a\105\uff7a\106\uff7a\107\uff7a\110\uff7a\115" +
    "\uff7a\121\uff7a\123\uff7a\125\uff7a\126\uff7a\132\uff7a\141\uff7a" +
    "\142\uff7a\144\uff7a\146\uff7a\147\uff7a\151\uff7a\154\uff7a\156" +
    "\uff7a\157\uff7a\001\002\000\004\005\u014f\001\002\000\004" +
    "\157\u0150\001\002\000\004\006\u0151\001\002\000\010\002" +
    "\uffff\004\uffff\034\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u014f\000\006\002\004\004\003\001\001\000\004\003" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\005\034" +
    "\006\031\007\030\011\040\012\046\013\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\365\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\160\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\053" +
    "\001\001\000\004\011\055\001\001\000\004\011\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\063\001\001\000\004" +
    "\023\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\125\001\001\000" +
    "\002\001\001\000\004\033\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\134\001\001\000\002\001\001\000\004\033\136" +
    "\001\001\000\002\001\001\000\004\033\140\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\146\001" +
    "\001\000\004\023\066\001\001\000\002\001\001\000\004" +
    "\033\151\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\154\001\001\000\002\001\001\000\004\033\156" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\164\001\001\000\002\001\001\000\004" +
    "\024\170\001\001\000\002\001\001\000\004\033\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\066" +
    "\001\001\000\002\001\001\000\004\020\173\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\234\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\240\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\005\034\006\031\007\030\011\040\012\046\013\301\001" +
    "\001\000\004\030\244\001\001\000\006\027\266\033\263" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\300\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\304\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\306\001\001\000\004\023" +
    "\066\001\001\000\002\001\001\000\004\033\311\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\346\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\014\322\015\320\033\321\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\324" +
    "\001\001\000\002\001\001\000\004\033\327\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\322\015\332\033\321\001\001\000\002\001\001\000" +
    "\004\033\335\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\014\322\015\340\033\321\001" +
    "\001\000\002\001\001\000\004\033\343\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\351" +
    "\001\001\000\002\001\001\000\004\033\353\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\014\322\015\356" +
    "\016\357\033\321\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\014\322" +
    "\015\356\016\363\033\321\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\373\001\001\000\002\001\001\000\004\033\375\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\u0101\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\u0104\001\001\000\002\001\001\000\004\033" +
    "\u0106\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\014\322\015\356\016\u0109\033\321\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\u010d" +
    "\001\001\000\002\001\001\000\004\033\u010f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\u0114\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\u0117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\u011b\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\u011e" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\025" +
    "\u0124\026\u0122\033\u0121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\025" +
    "\u0124\026\u0126\033\u0121\001\001\000\002\001\001\000\004" +
    "\033\u0128\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\u012c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\u0136\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\u0139\001\001" +
    "\000\002\001\001\000\004\021\u013b\001\001\000\002\001" +
    "\001\000\004\033\u013d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\u0143\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\u0146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\u014a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public net.lemonmodel.patterns.parser.Absyn.Statements pStatements() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (net.lemonmodel.patterns.parser.Absyn.Statements) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // URI ::= FullURI 
            {
              net.lemonmodel.patterns.parser.Absyn.URI RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EURI(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URI",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // URI ::= _SYMB_1 _IDENT_ 
            {
              net.lemonmodel.patterns.parser.Absyn.URI RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EQName2(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URI",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // URI ::= _IDENT_ _SYMB_1 _IDENT_ 
            {
              net.lemonmodel.patterns.parser.Absyn.URI RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EQName(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URI",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Gender ::= _SYMB_78 
            {
              net.lemonmodel.patterns.parser.Absyn.Gender RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EOtherGender(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Gender",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Gender ::= _SYMB_48 
            {
              net.lemonmodel.patterns.parser.Absyn.Gender RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ECommonGender(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Gender",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Gender ::= _SYMB_72 
            {
              net.lemonmodel.patterns.parser.Absyn.Gender RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENeutGender(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Gender",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Gender ::= _SYMB_59 
            {
              net.lemonmodel.patterns.parser.Absyn.Gender RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EFemGender(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Gender",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Gender ::= _SYMB_71 
            {
              net.lemonmodel.patterns.parser.Absyn.Gender RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EMascGender(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Gender",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // POSTag ::= _STRING_ 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAnyPOS(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // POSTag ::= _SYMB_102 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EVerbPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // POSTag ::= _SYMB_97 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESlashPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // POSTag ::= _SYMB_95 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESemiColonPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // POSTag ::= _SYMB_91 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPunctuationPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // POSTag ::= _SYMB_87 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPronounPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // POSTag ::= _SYMB_85 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPrepositionPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // POSTag ::= _SYMB_84 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPostpositionPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // POSTag ::= _SYMB_83 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPointPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // POSTag ::= _SYMB_80 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EParticlePOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // POSTag ::= _SYMB_76 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENumeralPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // POSTag ::= _SYMB_75 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENounPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // POSTag ::= _SYMB_70 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EInterjectionPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // POSTag ::= _SYMB_56 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDeterminerPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // POSTag ::= _SYMB_53 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ECopulaPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // POSTag ::= _SYMB_51 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConjunctionPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // POSTag ::= _SYMB_47 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ECommaPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // POSTag ::= _SYMB_46 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EColonPOSPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // POSTag ::= _SYMB_44 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ECircumpositionPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // POSTag ::= _SYMB_42 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EBulletPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // POSTag ::= _SYMB_40 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EArticlePOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // POSTag ::= _SYMB_39 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAdverbPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // POSTag ::= _SYMB_38 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAdpositionPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // POSTag ::= _SYMB_37 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAdjectivePOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ListCategory ::= ListCategory Category 
            {
              net.lemonmodel.patterns.parser.Absyn.ListCategory RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListCategory p_1 = (net.lemonmodel.patterns.parser.Absyn.ListCategory)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.Category p_2 = (net.lemonmodel.patterns.parser.Absyn.Category)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCategory",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ListCategory ::= 
            {
              net.lemonmodel.patterns.parser.Absyn.ListCategory RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListCategory(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCategory",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Category ::= URI _SYMB_12 URI 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_3 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAnyCat(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Category ::= _SYMB_79 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EParticiple(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Category ::= _SYMB_68 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EInfinitive(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Category ::= _SYMB_64 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EGerundive(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Category ::= _SYMB_50 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConditional(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Category ::= _SYMB_98 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESubjunctive(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Category ::= _SYMB_67 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EIndicative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Category ::= _SYMB_65 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EImperative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Category ::= _SYMB_66 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EImperfect(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Category ::= _SYMB_101 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EThirdPerson(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Category ::= _SYMB_94 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESecondPerson(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Category ::= _SYMB_60 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EFirstPerson(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Category ::= _SYMB_62 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EFuture(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Category ::= _SYMB_81 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPast(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Category ::= _SYMB_86 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPresent(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Category ::= _SYMB_99 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESuperlative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Category ::= _SYMB_49 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EComparative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Category ::= _SYMB_55 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Category ::= _SYMB_63 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EGenitive(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Category ::= _SYMB_36 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAccusative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Category ::= _SYMB_73 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENominative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Category ::= _SYMB_82 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPlural(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Category ::= _SYMB_57 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDual(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Category ::= _SYMB_96 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESingular(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ListScalarMembership ::= ScalarMembership _SYMB_4 ListScalarMembership 
            {
              net.lemonmodel.patterns.parser.Absyn.ListScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.ScalarMembership p_1 = (net.lemonmodel.patterns.parser.Absyn.ScalarMembership)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.ListScalarMembership p_3 = (net.lemonmodel.patterns.parser.Absyn.ListScalarMembership)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListScalarMembership",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ListScalarMembership ::= ScalarMembership 
            {
              net.lemonmodel.patterns.parser.Absyn.ListScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.ScalarMembership p_1 = (net.lemonmodel.patterns.parser.Absyn.ScalarMembership)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListScalarMembership(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListScalarMembership",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ListScalarMembership ::= 
            {
              net.lemonmodel.patterns.parser.Absyn.ListScalarMembership RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListScalarMembership(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListScalarMembership",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ScalarMembership ::= _DOUBLE_ _SYMB_11 URI _SYMB_11 _DOUBLE_ _SYMB_61 URI 
            {
              net.lemonmodel.patterns.parser.Absyn.ScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_3 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double p_5 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_7 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.BoundedScalarMembership(p_1,p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarMembership",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ScalarMembership ::= URI _SYMB_11 _DOUBLE_ _SYMB_61 URI 
            {
              net.lemonmodel.patterns.parser.Absyn.ScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double p_3 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.LessThanScalarMembership(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarMembership",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ScalarMembership ::= URI _SYMB_10 _DOUBLE_ _SYMB_61 URI 
            {
              net.lemonmodel.patterns.parser.Absyn.ScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double p_3 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.GreaterThanScalarMembership(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarMembership",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ScalarMembership ::= URI _SYMB_43 
            {
              net.lemonmodel.patterns.parser.Absyn.ScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.CentralScalarMembership(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarMembership",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ScalarMembership ::= URI _SYMB_52 
            {
              net.lemonmodel.patterns.parser.Absyn.ScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ContravariantScalarMembership(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarMembership",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ScalarMembership ::= URI _SYMB_54 
            {
              net.lemonmodel.patterns.parser.Absyn.ScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.CovariantScalarMembership(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarMembership",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ListPOSTaggedWord ::= ListPOSTaggedWord POSTaggedWord 
            {
              net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord p_1 = (net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.POSTaggedWord p_2 = (net.lemonmodel.patterns.parser.Absyn.POSTaggedWord)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPOSTaggedWord",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ListPOSTaggedWord ::= 
            {
              net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPOSTaggedWord",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // POSTaggedWord ::= _STRING_ _SYMB_9 POSTag 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTaggedWord RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.POSTag p_3 = (net.lemonmodel.patterns.parser.Absyn.POSTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPOSTaggedWord(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTaggedWord",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // AP ::= _SYMB_7 ListPOSTaggedWord _SYMB_8 
            {
              net.lemonmodel.patterns.parser.Absyn.AP RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord p_2 = (net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAPComplex(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // AP ::= _STRING_ 
            {
              net.lemonmodel.patterns.parser.Absyn.AP RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAPSimple(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VP ::= _SYMB_7 ListPOSTaggedWord _SYMB_8 
            {
              net.lemonmodel.patterns.parser.Absyn.VP RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord p_2 = (net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EVPComplex(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VP ::= _STRING_ 
            {
              net.lemonmodel.patterns.parser.Absyn.VP RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EVPSimple(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NP ::= _SYMB_7 ListPOSTaggedWord _SYMB_8 
            {
              net.lemonmodel.patterns.parser.Absyn.NP RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord p_2 = (net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENPComplex(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NP ::= _STRING_ 
            {
              net.lemonmodel.patterns.parser.Absyn.NP RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENPSimple(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PNP ::= _SYMB_7 ListPOSTaggedWord _SYMB_8 
            {
              net.lemonmodel.patterns.parser.Absyn.PNP RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord p_2 = (net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPNPComplex(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PNP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PNP ::= _STRING_ 
            {
              net.lemonmodel.patterns.parser.Absyn.PNP RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPNPSimple(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PNP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ListOntologyFrameElement ::= OntologyFrameElement _SYMB_4 ListOntologyFrameElement 
            {
              net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_1 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement p_3 = (net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListOntologyFrameElement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ListOntologyFrameElement ::= OntologyFrameElement 
            {
              net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_1 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListOntologyFrameElement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ListOntologyFrameElement ::= 
            {
              net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListOntologyFrameElement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OntologyFrameElement ::= Arg 
            {
              net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_1 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EArgAsOFE(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OntologyFrameElement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OntologyFrameElement ::= URI _SYMB_41 Arg 
            {
              net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_3 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EURIAsSynArg(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OntologyFrameElement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Arg ::= _SYMB_26 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPossessiveAdjunct(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Arg ::= _SYMB_27 _SYMB_3 _STRING_ _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPostpositionalObject(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Arg ::= _SYMB_28 _SYMB_3 _STRING_ _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPrepositionalObject(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Arg ::= _SYMB_17 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ECopulativeSubject(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Arg ::= _SYMB_16 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ECopulativeArg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Arg ::= _SYMB_20 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EIndirectObject(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Arg ::= _SYMB_18 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDirectObject(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Arg ::= _SYMB_35 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESubject(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Arg ::= Arg _SYMB_93 URI 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_1 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_3 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ERestrictedArg(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Arg ::= Arg _SYMB_77 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_1 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EOptionalArg(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ListPattern ::= Pattern _SYMB_4 ListPattern 
            {
              net.lemonmodel.patterns.parser.Absyn.ListPattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.Pattern p_1 = (net.lemonmodel.patterns.parser.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.ListPattern p_3 = (net.lemonmodel.patterns.parser.Absyn.ListPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPattern",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ListPattern ::= Pattern 
            {
              net.lemonmodel.patterns.parser.Absyn.ListPattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.Pattern p_1 = (net.lemonmodel.patterns.parser.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPattern",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ListPattern ::= 
            {
              net.lemonmodel.patterns.parser.Absyn.ListPattern RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListPattern(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPattern",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // AdjectivePattern ::= _SYMB_33 _SYMB_3 AP _SYMB_4 _SYMB_7 ListScalarMembership _SYMB_8 _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.AdjectivePattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.AP p_3 = (net.lemonmodel.patterns.parser.Absyn.AP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.ListScalarMembership p_6 = (net.lemonmodel.patterns.parser.Absyn.ListScalarMembership)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EScalarAdjective(p_3,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdjectivePattern",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // AdjectivePattern ::= _SYMB_30 _SYMB_3 AP _SYMB_4 URI _SYMB_4 _SYMB_92 _SYMB_6 Arg _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.AdjectivePattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.AP p_3 = (net.lemonmodel.patterns.parser.Absyn.AP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_9 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ERelationalAdjective(p_3,p_5,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdjectivePattern",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // AdjectivePattern ::= _SYMB_29 _SYMB_3 AP _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.AdjectivePattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.AP p_3 = (net.lemonmodel.patterns.parser.Absyn.AP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPropertyModifyingAdjective(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdjectivePattern",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AdjectivePattern ::= _SYMB_22 _SYMB_3 AP _SYMB_4 URI _SYMB_4 _STRING_ _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.AdjectivePattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.AP p_3 = (net.lemonmodel.patterns.parser.Absyn.AP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EIntersectiveDataPropertyAdjective(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdjectivePattern",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // AdjectivePattern ::= _SYMB_23 _SYMB_3 AP _SYMB_4 URI _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.AdjectivePattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.AP p_3 = (net.lemonmodel.patterns.parser.Absyn.AP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_7 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EIntersectiveObjectPropertyAdjective(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdjectivePattern",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // AdjectivePattern ::= _SYMB_21 _SYMB_3 AP _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.AdjectivePattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.AP p_3 = (net.lemonmodel.patterns.parser.Absyn.AP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EIntersectiveAdjective(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdjectivePattern",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VerbPattern3 ::= _SYMB_19 _SYMB_3 VP _SYMB_4 URI _SYMB_4 _SYMB_7 ListOntologyFrameElement _SYMB_8 _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement p_8 = (net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EEventVerb(p_3,p_5,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern3",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VerbPattern2 ::= _SYMB_69 VerbPattern3 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.VerbPattern p_2 = (net.lemonmodel.patterns.parser.Absyn.VerbPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EInstantEventVerb(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VerbPattern2 ::= _SYMB_58 VerbPattern3 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.VerbPattern p_2 = (net.lemonmodel.patterns.parser.Absyn.VerbPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDurativeEventVerb(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VerbPattern ::= _SYMB_15 _SYMB_3 VP _SYMB_4 URI _SYMB_4 _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConsequenceVerb8(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VerbPattern ::= _SYMB_15 _SYMB_3 VP _SYMB_4 URI _SYMB_4 _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_8 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConsequenceVerb7(p_3,p_5,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VerbPattern ::= _SYMB_15 _SYMB_3 VP _SYMB_4 URI _SYMB_4 _SYMB_88 _SYMB_6 OntologyFrameElement _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_9 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConsequenceVerb6(p_3,p_5,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VerbPattern ::= _SYMB_15 _SYMB_3 VP _SYMB_4 URI _SYMB_4 _SYMB_88 _SYMB_6 OntologyFrameElement _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_9 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_11left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_11right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_11 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConsequenceVerb5(p_3,p_5,p_9,p_11); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VerbPattern ::= _SYMB_15 _SYMB_3 VP _SYMB_4 URI _SYMB_4 _SYMB_89 _SYMB_6 OntologyFrameElement _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_9 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConsequenceVerb4(p_3,p_5,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VerbPattern ::= _SYMB_15 _SYMB_3 VP _SYMB_4 URI _SYMB_4 _SYMB_89 _SYMB_6 OntologyFrameElement _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_9 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_11left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_11right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_11 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConsequenceVerb3(p_3,p_5,p_9,p_11); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VerbPattern ::= _SYMB_15 _SYMB_3 VP _SYMB_4 URI _SYMB_4 _SYMB_89 _SYMB_6 OntologyFrameElement _SYMB_4 _SYMB_88 _SYMB_6 OntologyFrameElement _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_9 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_13left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_13right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_13 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConsequenceVerb2(p_3,p_5,p_9,p_13); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VerbPattern ::= _SYMB_15 _SYMB_3 VP _SYMB_4 URI _SYMB_4 _SYMB_89 _SYMB_6 OntologyFrameElement _SYMB_4 _SYMB_88 _SYMB_6 OntologyFrameElement _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_9 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_13left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_13right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_13 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_15left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_15right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_15 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConsequenceVerb1(p_3,p_5,p_9,p_13,p_15); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VerbPattern ::= VerbPattern3 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.VerbPattern p_1 = (net.lemonmodel.patterns.parser.Absyn.VerbPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDunnotelicEventVerb(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VerbPattern ::= _SYMB_74 VerbPattern2 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.VerbPattern p_2 = (net.lemonmodel.patterns.parser.Absyn.VerbPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENontelicEventVerb(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VerbPattern ::= _SYMB_100 VerbPattern2 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.VerbPattern p_2 = (net.lemonmodel.patterns.parser.Absyn.VerbPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ETelicEventVerb(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VerbPattern ::= _SYMB_34 _SYMB_3 VP _SYMB_4 URI _SYMB_4 _SYMB_89 _SYMB_6 Arg _SYMB_4 _SYMB_88 _SYMB_6 Arg _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_9 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_13left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_13right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_13 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EStateVerb3(p_3,p_5,p_9,p_13); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VerbPattern ::= _SYMB_34 _SYMB_3 VP _SYMB_4 URI _SYMB_4 _SYMB_88 _SYMB_6 Arg _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_9 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EStateVerb2(p_3,p_5,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VerbPattern ::= _SYMB_34 _SYMB_3 VP _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EStateVerb1(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NounPattern ::= _SYMB_14 _SYMB_3 NP _SYMB_4 _SYMB_45 _SYMB_6 URI _SYMB_4 _SYMB_90 _SYMB_6 URI _SYMB_4 _SYMB_88 _SYMB_6 Arg _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		net.lemonmodel.patterns.parser.Absyn.NP p_3 = (net.lemonmodel.patterns.parser.Absyn.NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_7 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_11left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_11right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_11 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_15left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_15right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_15 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EClassRelationalNoun2(p_3,p_7,p_11,p_15); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NounPattern ::= _SYMB_14 _SYMB_3 NP _SYMB_4 _SYMB_45 _SYMB_6 URI _SYMB_4 _SYMB_90 _SYMB_6 URI _SYMB_4 _SYMB_89 _SYMB_6 Arg _SYMB_4 _SYMB_88 _SYMB_6 Arg _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		net.lemonmodel.patterns.parser.Absyn.NP p_3 = (net.lemonmodel.patterns.parser.Absyn.NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_7 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int p_11left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_11right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_11 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_15left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_15right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_15 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_19left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_19right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_19 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EClassRelationalNoun1(p_3,p_7,p_11,p_15,p_19); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NounPattern ::= _SYMB_31 _SYMB_3 NP _SYMB_4 URI _SYMB_4 _SYMB_7 ListOntologyFrameElement _SYMB_8 _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.NP p_3 = (net.lemonmodel.patterns.parser.Absyn.NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement p_8 = (net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ERelationalMultivalentNoun(p_3,p_5,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NounPattern ::= _SYMB_32 _SYMB_3 NP _SYMB_4 URI _SYMB_4 _SYMB_88 _SYMB_6 Arg _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.NP p_3 = (net.lemonmodel.patterns.parser.Absyn.NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_9 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ERelationalNoun2(p_3,p_5,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NounPattern ::= _SYMB_32 _SYMB_3 NP _SYMB_4 URI _SYMB_4 _SYMB_89 _SYMB_6 Arg _SYMB_4 _SYMB_88 _SYMB_6 Arg _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		net.lemonmodel.patterns.parser.Absyn.NP p_3 = (net.lemonmodel.patterns.parser.Absyn.NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_9 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_13left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_13right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_13 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ERelationalNoun1(p_3,p_5,p_9,p_13); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NounPattern ::= _SYMB_13 _SYMB_3 NP _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.NP p_3 = (net.lemonmodel.patterns.parser.Absyn.NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EClassNoun(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NounPattern ::= _SYMB_25 _SYMB_3 PNP _SYMB_4 URI _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.PNP p_3 = (net.lemonmodel.patterns.parser.Absyn.PNP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EName(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Pattern ::= AdjectivePattern 
            {
              net.lemonmodel.patterns.parser.Absyn.Pattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.AdjectivePattern p_1 = (net.lemonmodel.patterns.parser.Absyn.AdjectivePattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAdjective(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Pattern ::= VerbPattern 
            {
              net.lemonmodel.patterns.parser.Absyn.Pattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.VerbPattern p_1 = (net.lemonmodel.patterns.parser.Absyn.VerbPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EVerb(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Pattern ::= NounPattern Gender 
            {
              net.lemonmodel.patterns.parser.Absyn.Pattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.NounPattern p_1 = (net.lemonmodel.patterns.parser.Absyn.NounPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.Gender p_2 = (net.lemonmodel.patterns.parser.Absyn.Gender)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENounWithGender(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Pattern ::= NounPattern 
            {
              net.lemonmodel.patterns.parser.Absyn.Pattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.NounPattern p_1 = (net.lemonmodel.patterns.parser.Absyn.NounPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENoun(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Pattern ::= Pattern _SYMB_103 ListCategory _STRING_ 
            {
              net.lemonmodel.patterns.parser.Absyn.Pattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.Pattern p_1 = (net.lemonmodel.patterns.parser.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListCategory p_3 = (net.lemonmodel.patterns.parser.Absyn.ListCategory)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPatternWithForm(p_1,p_3,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListStatement ::= ListStatement Statement 
            {
              net.lemonmodel.patterns.parser.Absyn.ListStatement RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListStatement p_1 = (net.lemonmodel.patterns.parser.Absyn.ListStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.Statement p_2 = (net.lemonmodel.patterns.parser.Absyn.Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStatement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListStatement ::= 
            {
              net.lemonmodel.patterns.parser.Absyn.ListStatement RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListStatement(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStatement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Statement ::= _SYMB_24 _SYMB_3 URI _SYMB_4 _STRING_ _SYMB_4 ListPattern _SYMB_5 
            {
              net.lemonmodel.patterns.parser.Absyn.Statement RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_3 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListPattern p_7 = (net.lemonmodel.patterns.parser.Absyn.ListPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ELexicon(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Statement ::= _SYMB_0 _IDENT_ _SYMB_1 FullURI _SYMB_2 
            {
              net.lemonmodel.patterns.parser.Absyn.Statement RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPrefix(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Statements ::= ListStatement 
            {
              net.lemonmodel.patterns.parser.Absyn.Statements RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.ListStatement p_1 = (net.lemonmodel.patterns.parser.Absyn.ListStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EStatments(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Statements EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Statements start_val = (net.lemonmodel.patterns.parser.Absyn.Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

