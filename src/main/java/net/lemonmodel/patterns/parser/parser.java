
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 20 16:46:31 CET 2013
//----------------------------------------------------

package net.lemonmodel.patterns.parser;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 20 16:46:31 CET 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\173\000\002\002\004\000\002\002\003\000\002\003" +
    "\011\000\002\003\012\000\002\004\002\000\002\004\004" +
    "\000\002\005\006\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\006\010\000\002\006\010\000\002" +
    "\006\020\000\002\006\014\000\002\006\014\000\002\006" +
    "\026\000\002\006\022\000\002\007\010\000\002\007\014" +
    "\000\002\007\020\000\002\007\004\000\002\007\004\000" +
    "\002\007\003\000\002\007\004\000\002\007\004\000\002" +
    "\007\003\000\002\010\004\000\002\010\004\000\002\011" +
    "\014\000\002\012\022\000\002\012\020\000\002\013\010" +
    "\000\002\013\012\000\002\013\012\000\002\013\010\000" +
    "\002\013\014\000\002\013\012\000\002\014\002\000\002" +
    "\014\003\000\002\014\005\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\006\000\002\015\006\000\002\015\003\000" +
    "\002\016\005\000\002\017\002\000\002\017\003\000\002" +
    "\017\005\000\002\020\003\000\002\020\006\000\002\021" +
    "\003\000\002\021\006\000\002\022\003\000\002\022\006" +
    "\000\002\023\003\000\002\023\006\000\002\024\005\000" +
    "\002\025\002\000\002\025\003\000\002\025\005\000\002" +
    "\026\004\000\002\026\004\000\002\026\007\000\002\026" +
    "\007\000\002\027\002\000\002\027\003\000\002\027\005" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\005\000\002\031\002\000\002\031\004" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\033\005\000\002\033\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013c\000\010\002\ufffd\004\ufffd\035\ufffd\001\002\000" +
    "\010\002\000\004\007\035\011\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\004\153\u0139\001" +
    "\002\000\010\002\ufffc\004\ufffc\035\ufffc\001\002\000\004" +
    "\011\012\001\002\000\006\006\013\153\015\001\002\000" +
    "\004\154\u0137\001\002\000\004\012\020\001\002\000\004" +
    "\005\016\001\002\000\004\153\017\001\002\000\106\006" +
    "\uff88\007\uff88\012\uff88\013\uff88\016\uff88\020\uff88\054\uff88" +
    "\061\uff88\067\uff88\070\uff88\072\uff88\074\uff88\075\uff88\077" +
    "\uff88\101\uff88\103\uff88\104\uff88\105\uff88\106\uff88\107\uff88" +
    "\110\uff88\111\uff88\114\uff88\120\uff88\122\uff88\123\uff88\127" +
    "\uff88\137\uff88\141\uff88\143\uff88\144\uff88\146\uff88\151\uff88" +
    "\153\uff88\001\002\000\004\151\021\001\002\000\004\012" +
    "\022\001\002\000\050\013\uffdc\022\037\023\035\024\034" +
    "\030\050\032\047\033\046\034\045\037\044\044\030\045" +
    "\027\046\026\047\024\050\023\051\053\100\031\112\041" +
    "\115\040\145\025\001\002\000\004\011\u0122\001\002\000" +
    "\004\011\u0111\001\002\000\006\100\244\112\242\001\002" +
    "\000\004\011\u0107\001\002\000\004\011\376\001\002\000" +
    "\004\011\371\001\002\000\004\024\034\001\002\000\010" +
    "\012\ufff9\013\ufff9\150\ufff9\001\002\000\010\012\ufffa\013" +
    "\ufffa\150\ufffa\001\002\000\004\011\350\001\002\000\004" +
    "\011\321\001\002\000\010\012\262\013\uffdb\150\261\001" +
    "\002\000\004\011\247\001\002\000\006\100\244\112\242" +
    "\001\002\000\004\024\034\001\002\000\010\012\uffe8\013" +
    "\uffe8\150\uffe8\001\002\000\010\012\uffeb\013\uffeb\150\uffeb" +
    "\001\002\000\004\011\227\001\002\000\004\011\220\001" +
    "\002\000\004\011\211\001\002\000\004\011\177\001\002" +
    "\000\004\011\160\001\002\000\010\012\ufff8\013\ufff8\150" +
    "\ufff8\001\002\000\004\013\157\001\002\000\004\011\054" +
    "\001\002\000\006\053\057\151\055\001\002\000\004\012" +
    "\uffc9\001\002\000\004\012\121\001\002\000\004\011\060" +
    "\001\002\000\006\013\uffc4\151\062\001\002\000\004\013" +
    "\120\001\002\000\004\017\066\001\002\000\006\012\064" +
    "\013\uffc3\001\002\000\006\013\uffc4\151\062\001\002\000" +
    "\004\013\uffc2\001\002\000\062\055\104\056\103\057\101" +
    "\060\077\062\076\063\074\065\073\066\115\071\112\073" +
    "\110\076\107\113\105\116\102\117\100\121\075\124\116" +
    "\125\114\126\113\131\111\135\106\140\072\142\071\147" +
    "\117\151\067\001\002\000\006\012\uff89\013\uff89\001\002" +
    "\000\006\012\uffc5\013\uffc5\001\002\000\006\012\uff8b\013" +
    "\uff8b\001\002\000\006\012\uff8c\013\uff8c\001\002\000\006" +
    "\012\uff9a\013\uff9a\001\002\000\006\012\uff9b\013\uff9b\001" +
    "\002\000\006\012\uff92\013\uff92\001\002\000\006\012\uff9c" +
    "\013\uff9c\001\002\000\006\012\uff9d\013\uff9d\001\002\000" +
    "\006\012\uff93\013\uff93\001\002\000\006\012\uff9e\013\uff9e" +
    "\001\002\000\006\012\uff94\013\uff94\001\002\000\006\012" +
    "\uff9f\013\uff9f\001\002\000\006\012\uffa0\013\uffa0\001\002" +
    "\000\006\012\uff95\013\uff95\001\002\000\006\012\uff8d\013" +
    "\uff8d\001\002\000\006\012\uff96\013\uff96\001\002\000\006" +
    "\012\uff97\013\uff97\001\002\000\006\012\uff8e\013\uff8e\001" +
    "\002\000\006\012\uff98\013\uff98\001\002\000\006\012\uff8f" +
    "\013\uff8f\001\002\000\006\012\uff90\013\uff90\001\002\000" +
    "\006\012\uff99\013\uff99\001\002\000\006\012\uff91\013\uff91" +
    "\001\002\000\006\012\uff8a\013\uff8a\001\002\000\004\012" +
    "\uffc8\001\002\000\006\006\013\153\015\001\002\000\006" +
    "\012\124\013\123\001\002\000\010\012\ufff0\013\ufff0\150" +
    "\ufff0\001\002\000\006\132\126\133\125\001\002\000\004" +
    "\014\150\001\002\000\004\014\127\001\002\000\022\025" +
    "\136\026\135\027\133\031\134\041\130\042\132\043\131" +
    "\052\137\001\002\000\010\012\uffd2\013\uffd2\016\uffd2\001" +
    "\002\000\004\011\145\001\002\000\004\011\142\001\002" +
    "\000\010\012\uffd8\013\uffd8\016\uffd8\001\002\000\010\012" +
    "\uffd7\013\uffd7\016\uffd7\001\002\000\010\012\uffd5\013\uffd5" +
    "\016\uffd5\001\002\000\010\012\uffd6\013\uffd6\016\uffd6\001" +
    "\002\000\010\012\uffd9\013\uffd9\016\uffd9\001\002\000\004" +
    "\013\141\001\002\000\010\012\uffef\013\uffef\150\uffef\001" +
    "\002\000\004\151\143\001\002\000\004\013\144\001\002" +
    "\000\010\012\uffd3\013\uffd3\016\uffd3\001\002\000\004\151" +
    "\146\001\002\000\004\013\147\001\002\000\010\012\uffd4" +
    "\013\uffd4\016\uffd4\001\002\000\022\025\136\026\135\027" +
    "\133\031\134\041\130\042\132\043\131\052\137\001\002" +
    "\000\004\012\152\001\002\000\004\130\153\001\002\000" +
    "\004\014\154\001\002\000\022\025\136\026\135\027\133" +
    "\031\134\041\130\042\132\043\131\052\137\001\002\000" +
    "\004\013\156\001\002\000\010\012\uffee\013\uffee\150\uffee" +
    "\001\002\000\010\002\ufffe\004\ufffe\035\ufffe\001\002\000" +
    "\006\053\057\151\055\001\002\000\004\012\162\001\002" +
    "\000\006\006\013\153\015\001\002\000\004\012\164\001" +
    "\002\000\004\015\165\001\002\000\010\006\013\016\uffd0" +
    "\153\015\001\002\000\006\012\175\016\uffcf\001\002\000" +
    "\004\061\173\001\002\000\004\016\171\001\002\000\004" +
    "\013\172\001\002\000\010\012\uffe5\013\uffe5\150\uffe5\001" +
    "\002\000\022\025\136\026\135\027\133\031\134\041\130" +
    "\042\132\043\131\052\137\001\002\000\006\012\uffd1\016" +
    "\uffd1\001\002\000\010\006\013\016\uffd0\153\015\001\002" +
    "\000\004\016\uffce\001\002\000\006\021\202\151\200\001" +
    "\002\000\004\012\uffc7\001\002\000\004\012\206\001\002" +
    "\000\004\011\203\001\002\000\006\013\uffc4\151\062\001" +
    "\002\000\004\013\205\001\002\000\004\012\uffc6\001\002" +
    "\000\006\006\013\153\015\001\002\000\004\013\210\001" +
    "\002\000\010\012\uffe2\013\uffe2\150\uffe2\001\002\000\006" +
    "\021\202\151\200\001\002\000\004\012\213\001\002\000" +
    "\006\006\013\153\015\001\002\000\004\012\215\001\002" +
    "\000\006\006\013\153\015\001\002\000\004\013\217\001" +
    "\002\000\010\012\uffe0\013\uffe0\150\uffe0\001\002\000\006" +
    "\021\202\151\200\001\002\000\004\012\222\001\002\000" +
    "\006\006\013\153\015\001\002\000\004\012\224\001\002" +
    "\000\006\006\013\153\015\001\002\000\004\013\226\001" +
    "\002\000\010\012\uffe1\013\uffe1\150\uffe1\001\002\000\006" +
    "\040\231\151\230\001\002\000\004\012\uffcd\001\002\000" +
    "\004\011\236\001\002\000\004\012\233\001\002\000\006" +
    "\006\013\153\015\001\002\000\004\013\235\001\002\000" +
    "\010\012\ufff7\013\ufff7\150\ufff7\001\002\000\006\013\uffc4" +
    "\151\062\001\002\000\004\013\240\001\002\000\004\012" +
    "\uffcc\001\002\000\010\012\uffe9\013\uffe9\150\uffe9\001\002" +
    "\000\004\030\050\001\002\000\010\012\uffec\013\uffec\150" +
    "\uffec\001\002\000\004\030\050\001\002\000\010\012\uffe7" +
    "\013\uffe7\150\uffe7\001\002\000\010\012\uffe6\013\uffe6\150" +
    "\uffe6\001\002\000\006\036\251\151\250\001\002\000\004" +
    "\012\uffcb\001\002\000\004\011\256\001\002\000\004\012" +
    "\253\001\002\000\006\006\013\153\015\001\002\000\004" +
    "\013\255\001\002\000\010\012\ufff6\013\ufff6\150\ufff6\001" +
    "\002\000\006\013\uffc4\151\062\001\002\000\004\013\260" +
    "\001\002\000\004\012\uffca\001\002\000\066\006\uffa2\054" +
    "\uffa2\067\uffa2\070\uffa2\075\uffa2\077\uffa2\101\uffa2\103\uffa2" +
    "\104\uffa2\105\uffa2\106\uffa2\107\uffa2\110\uffa2\111\uffa2\114" +
    "\uffa2\120\uffa2\122\uffa2\123\uffa2\127\uffa2\137\uffa2\141\uffa2" +
    "\143\uffa2\144\uffa2\146\uffa2\151\uffa2\153\uffa2\001\002\000" +
    "\050\013\uffdc\022\037\023\035\024\034\030\050\032\047" +
    "\033\046\034\045\037\044\044\030\045\027\046\026\047" +
    "\024\050\023\051\053\100\031\112\041\115\040\145\025" +
    "\001\002\000\004\013\uffda\001\002\000\066\006\013\054" +
    "\306\067\314\070\312\075\310\077\307\101\277\103\275" +
    "\104\274\105\272\106\267\107\265\110\316\111\315\114" +
    "\305\120\304\122\302\123\301\127\313\137\300\141\276" +
    "\143\273\144\271\146\266\151\270\153\015\001\002\000" +
    "\066\006\uffab\054\uffab\067\uffab\070\uffab\075\uffab\077\uffab" +
    "\101\uffab\103\uffab\104\uffab\105\uffab\106\uffab\107\uffab\110" +
    "\uffab\111\uffab\114\uffab\120\uffab\122\uffab\123\uffab\127\uffab" +
    "\137\uffab\141\uffab\143\uffab\144\uffab\146\uffab\151\uffab\153" +
    "\uffab\001\002\000\066\006\uffac\054\uffac\067\uffac\070\uffac" +
    "\075\uffac\077\uffac\101\uffac\103\uffac\104\uffac\105\uffac\106" +
    "\uffac\107\uffac\110\uffac\111\uffac\114\uffac\120\uffac\122\uffac" +
    "\123\uffac\127\uffac\137\uffac\141\uffac\143\uffac\144\uffac\146" +
    "\uffac\151\uffac\153\uffac\001\002\000\066\006\uffaa\054\uffaa" +
    "\067\uffaa\070\uffaa\075\uffaa\077\uffaa\101\uffaa\103\uffaa\104" +
    "\uffaa\105\uffaa\106\uffaa\107\uffaa\110\uffaa\111\uffaa\114\uffaa" +
    "\120\uffaa\122\uffaa\123\uffaa\127\uffaa\137\uffaa\141\uffaa\143" +
    "\uffaa\144\uffaa\146\uffaa\151\uffaa\153\uffaa\001\002\000\010" +
    "\012\ufffb\013\ufffb\150\ufffb\001\002\000\066\006\uffb2\054" +
    "\uffb2\067\uffb2\070\uffb2\075\uffb2\077\uffb2\101\uffb2\103\uffb2" +
    "\104\uffb2\105\uffb2\106\uffb2\107\uffb2\110\uffb2\111\uffb2\114" +
    "\uffb2\120\uffb2\122\uffb2\123\uffb2\127\uffb2\137\uffb2\141\uffb2" +
    "\143\uffb2\144\uffb2\146\uffb2\151\uffb2\153\uffb2\001\002\000" +
    "\066\006\uffa6\054\uffa6\067\uffa6\070\uffa6\075\uffa6\077\uffa6" +
    "\101\uffa6\103\uffa6\104\uffa6\105\uffa6\106\uffa6\107\uffa6\110" +
    "\uffa6\111\uffa6\114\uffa6\120\uffa6\122\uffa6\123\uffa6\127\uffa6" +
    "\137\uffa6\141\uffa6\143\uffa6\144\uffa6\146\uffa6\151\uffa6\153" +
    "\uffa6\001\002\000\066\006\uffa8\054\uffa8\067\uffa8\070\uffa8" +
    "\075\uffa8\077\uffa8\101\uffa8\103\uffa8\104\uffa8\105\uffa8\106" +
    "\uffa8\107\uffa8\110\uffa8\111\uffa8\114\uffa8\120\uffa8\122\uffa8" +
    "\123\uffa8\127\uffa8\137\uffa8\141\uffa8\143\uffa8\144\uffa8\146" +
    "\uffa8\151\uffa8\153\uffa8\001\002\000\066\006\uffb5\054\uffb5" +
    "\067\uffb5\070\uffb5\075\uffb5\077\uffb5\101\uffb5\103\uffb5\104" +
    "\uffb5\105\uffb5\106\uffb5\107\uffb5\110\uffb5\111\uffb5\114\uffb5" +
    "\120\uffb5\122\uffb5\123\uffb5\127\uffb5\137\uffb5\141\uffb5\143" +
    "\uffb5\144\uffb5\146\uffb5\151\uffb5\153\uffb5\001\002\000\066" +
    "\006\uffaf\054\uffaf\067\uffaf\070\uffaf\075\uffaf\077\uffaf\101" +
    "\uffaf\103\uffaf\104\uffaf\105\uffaf\106\uffaf\107\uffaf\110\uffaf" +
    "\111\uffaf\114\uffaf\120\uffaf\122\uffaf\123\uffaf\127\uffaf\137" +
    "\uffaf\141\uffaf\143\uffaf\144\uffaf\146\uffaf\151\uffaf\153\uffaf" +
    "\001\002\000\066\006\uffba\054\uffba\067\uffba\070\uffba\075" +
    "\uffba\077\uffba\101\uffba\103\uffba\104\uffba\105\uffba\106\uffba" +
    "\107\uffba\110\uffba\111\uffba\114\uffba\120\uffba\122\uffba\123" +
    "\uffba\127\uffba\137\uffba\141\uffba\143\uffba\144\uffba\146\uffba" +
    "\151\uffba\153\uffba\001\002\000\066\006\uffae\054\uffae\067" +
    "\uffae\070\uffae\075\uffae\077\uffae\101\uffae\103\uffae\104\uffae" +
    "\105\uffae\106\uffae\107\uffae\110\uffae\111\uffae\114\uffae\120" +
    "\uffae\122\uffae\123\uffae\127\uffae\137\uffae\141\uffae\143\uffae" +
    "\144\uffae\146\uffae\151\uffae\153\uffae\001\002\000\066\006" +
    "\uffad\054\uffad\067\uffad\070\uffad\075\uffad\077\uffad\101\uffad" +
    "\103\uffad\104\uffad\105\uffad\106\uffad\107\uffad\110\uffad\111" +
    "\uffad\114\uffad\120\uffad\122\uffad\123\uffad\127\uffad\137\uffad" +
    "\141\uffad\143\uffad\144\uffad\146\uffad\151\uffad\153\uffad\001" +
    "\002\000\066\006\uffb8\054\uffb8\067\uffb8\070\uffb8\075\uffb8" +
    "\077\uffb8\101\uffb8\103\uffb8\104\uffb8\105\uffb8\106\uffb8\107" +
    "\uffb8\110\uffb8\111\uffb8\114\uffb8\120\uffb8\122\uffb8\123\uffb8" +
    "\127\uffb8\137\uffb8\141\uffb8\143\uffb8\144\uffb8\146\uffb8\151" +
    "\uffb8\153\uffb8\001\002\000\066\006\uffb0\054\uffb0\067\uffb0" +
    "\070\uffb0\075\uffb0\077\uffb0\101\uffb0\103\uffb0\104\uffb0\105" +
    "\uffb0\106\uffb0\107\uffb0\110\uffb0\111\uffb0\114\uffb0\120\uffb0" +
    "\122\uffb0\123\uffb0\127\uffb0\137\uffb0\141\uffb0\143\uffb0\144" +
    "\uffb0\146\uffb0\151\uffb0\153\uffb0\001\002\000\004\020\317" +
    "\001\002\000\066\006\uffa4\054\uffa4\067\uffa4\070\uffa4\075" +
    "\uffa4\077\uffa4\101\uffa4\103\uffa4\104\uffa4\105\uffa4\106\uffa4" +
    "\107\uffa4\110\uffa4\111\uffa4\114\uffa4\120\uffa4\122\uffa4\123" +
    "\uffa4\127\uffa4\137\uffa4\141\uffa4\143\uffa4\144\uffa4\146\uffa4" +
    "\151\uffa4\153\uffa4\001\002\000\066\006\uffb7\054\uffb7\067" +
    "\uffb7\070\uffb7\075\uffb7\077\uffb7\101\uffb7\103\uffb7\104\uffb7" +
    "\105\uffb7\106\uffb7\107\uffb7\110\uffb7\111\uffb7\114\uffb7\120" +
    "\uffb7\122\uffb7\123\uffb7\127\uffb7\137\uffb7\141\uffb7\143\uffb7" +
    "\144\uffb7\146\uffb7\151\uffb7\153\uffb7\001\002\000\066\006" +
    "\uffb6\054\uffb6\067\uffb6\070\uffb6\075\uffb6\077\uffb6\101\uffb6" +
    "\103\uffb6\104\uffb6\105\uffb6\106\uffb6\107\uffb6\110\uffb6\111" +
    "\uffb6\114\uffb6\120\uffb6\122\uffb6\123\uffb6\127\uffb6\137\uffb6" +
    "\141\uffb6\143\uffb6\144\uffb6\146\uffb6\151\uffb6\153\uffb6\001" +
    "\002\000\066\006\uffb9\054\uffb9\067\uffb9\070\uffb9\075\uffb9" +
    "\077\uffb9\101\uffb9\103\uffb9\104\uffb9\105\uffb9\106\uffb9\107" +
    "\uffb9\110\uffb9\111\uffb9\114\uffb9\120\uffb9\122\uffb9\123\uffb9" +
    "\127\uffb9\137\uffb9\141\uffb9\143\uffb9\144\uffb9\146\uffb9\151" +
    "\uffb9\153\uffb9\001\002\000\066\006\uffb4\054\uffb4\067\uffb4" +
    "\070\uffb4\075\uffb4\077\uffb4\101\uffb4\103\uffb4\104\uffb4\105" +
    "\uffb4\106\uffb4\107\uffb4\110\uffb4\111\uffb4\114\uffb4\120\uffb4" +
    "\122\uffb4\123\uffb4\127\uffb4\137\uffb4\141\uffb4\143\uffb4\144" +
    "\uffb4\146\uffb4\151\uffb4\153\uffb4\001\002\000\066\006\uffa1" +
    "\054\uffa1\067\uffa1\070\uffa1\075\uffa1\077\uffa1\101\uffa1\103" +
    "\uffa1\104\uffa1\105\uffa1\106\uffa1\107\uffa1\110\uffa1\111\uffa1" +
    "\114\uffa1\120\uffa1\122\uffa1\123\uffa1\127\uffa1\137\uffa1\141" +
    "\uffa1\143\uffa1\144\uffa1\146\uffa1\151\uffa1\153\uffa1\001\002" +
    "\000\066\006\uffa7\054\uffa7\067\uffa7\070\uffa7\075\uffa7\077" +
    "\uffa7\101\uffa7\103\uffa7\104\uffa7\105\uffa7\106\uffa7\107\uffa7" +
    "\110\uffa7\111\uffa7\114\uffa7\120\uffa7\122\uffa7\123\uffa7\127" +
    "\uffa7\137\uffa7\141\uffa7\143\uffa7\144\uffa7\146\uffa7\151\uffa7" +
    "\153\uffa7\001\002\000\066\006\uffb1\054\uffb1\067\uffb1\070" +
    "\uffb1\075\uffb1\077\uffb1\101\uffb1\103\uffb1\104\uffb1\105\uffb1" +
    "\106\uffb1\107\uffb1\110\uffb1\111\uffb1\114\uffb1\120\uffb1\122" +
    "\uffb1\123\uffb1\127\uffb1\137\uffb1\141\uffb1\143\uffb1\144\uffb1" +
    "\146\uffb1\151\uffb1\153\uffb1\001\002\000\066\006\uffb3\054" +
    "\uffb3\067\uffb3\070\uffb3\075\uffb3\077\uffb3\101\uffb3\103\uffb3" +
    "\104\uffb3\105\uffb3\106\uffb3\107\uffb3\110\uffb3\111\uffb3\114" +
    "\uffb3\120\uffb3\122\uffb3\123\uffb3\127\uffb3\137\uffb3\141\uffb3" +
    "\143\uffb3\144\uffb3\146\uffb3\151\uffb3\153\uffb3\001\002\000" +
    "\066\006\uffa5\054\uffa5\067\uffa5\070\uffa5\075\uffa5\077\uffa5" +
    "\101\uffa5\103\uffa5\104\uffa5\105\uffa5\106\uffa5\107\uffa5\110" +
    "\uffa5\111\uffa5\114\uffa5\120\uffa5\122\uffa5\123\uffa5\127\uffa5" +
    "\137\uffa5\141\uffa5\143\uffa5\144\uffa5\146\uffa5\151\uffa5\153" +
    "\uffa5\001\002\000\066\006\uffa9\054\uffa9\067\uffa9\070\uffa9" +
    "\075\uffa9\077\uffa9\101\uffa9\103\uffa9\104\uffa9\105\uffa9\106" +
    "\uffa9\107\uffa9\110\uffa9\111\uffa9\114\uffa9\120\uffa9\122\uffa9" +
    "\123\uffa9\127\uffa9\137\uffa9\141\uffa9\143\uffa9\144\uffa9\146" +
    "\uffa9\151\uffa9\153\uffa9\001\002\000\006\006\013\153\015" +
    "\001\002\000\066\006\uffa3\054\uffa3\067\uffa3\070\uffa3\075" +
    "\uffa3\077\uffa3\101\uffa3\103\uffa3\104\uffa3\105\uffa3\106\uffa3" +
    "\107\uffa3\110\uffa3\111\uffa3\114\uffa3\120\uffa3\122\uffa3\123" +
    "\uffa3\127\uffa3\137\uffa3\141\uffa3\143\uffa3\144\uffa3\146\uffa3" +
    "\151\uffa3\153\uffa3\001\002\000\006\036\251\151\250\001" +
    "\002\000\004\012\323\001\002\000\004\134\324\001\002" +
    "\000\004\014\325\001\002\000\006\006\013\153\015\001" +
    "\002\000\004\012\327\001\002\000\004\064\330\001\002" +
    "\000\004\014\331\001\002\000\006\006\013\153\015\001" +
    "\002\000\004\012\333\001\002\000\006\132\335\133\334" +
    "\001\002\000\004\014\341\001\002\000\004\014\336\001" +
    "\002\000\022\025\136\026\135\027\133\031\134\041\130" +
    "\042\132\043\131\052\137\001\002\000\004\013\340\001" +
    "\002\000\010\012\ufff1\013\ufff1\150\ufff1\001\002\000\022" +
    "\025\136\026\135\027\133\031\134\041\130\042\132\043" +
    "\131\052\137\001\002\000\004\012\343\001\002\000\004" +
    "\132\344\001\002\000\004\014\345\001\002\000\022\025" +
    "\136\026\135\027\133\031\134\041\130\042\132\043\131" +
    "\052\137\001\002\000\004\013\347\001\002\000\010\012" +
    "\ufff2\013\ufff2\150\ufff2\001\002\000\006\053\057\151\055" +
    "\001\002\000\004\012\352\001\002\000\006\006\013\153" +
    "\015\001\002\000\004\012\354\001\002\000\004\133\355" +
    "\001\002\000\004\014\356\001\002\000\022\025\136\026" +
    "\135\027\133\031\134\041\130\042\132\043\131\052\137" +
    "\001\002\000\004\012\360\001\002\000\004\132\361\001" +
    "\002\000\004\014\362\001\002\000\022\025\136\026\135" +
    "\027\133\031\134\041\130\042\132\043\131\052\137\001" +
    "\002\000\006\012\365\013\364\001\002\000\010\012\uffe3" +
    "\013\uffe3\150\uffe3\001\002\000\006\006\013\153\015\001" +
    "\002\000\004\013\367\001\002\000\010\012\uffe4\013\uffe4" +
    "\150\uffe4\001\002\000\010\012\uffea\013\uffea\150\uffea\001" +
    "\002\000\006\021\202\151\200\001\002\000\004\012\373" +
    "\001\002\000\006\006\013\153\015\001\002\000\004\013" +
    "\375\001\002\000\010\012\uffdf\013\uffdf\150\uffdf\001\002" +
    "\000\006\021\202\151\200\001\002\000\004\012\u0100\001" +
    "\002\000\006\006\013\153\015\001\002\000\004\012\u0102" +
    "\001\002\000\004\136\u0103\001\002\000\004\014\u0104\001" +
    "\002\000\022\025\136\026\135\027\133\031\134\041\130" +
    "\042\132\043\131\052\137\001\002\000\004\013\u0106\001" +
    "\002\000\010\012\uffde\013\uffde\150\uffde\001\002\000\006" +
    "\036\251\151\250\001\002\000\004\012\u0109\001\002\000" +
    "\006\006\013\153\015\001\002\000\004\012\u010b\001\002" +
    "\000\004\015\u010c\001\002\000\010\006\013\016\uffd0\153" +
    "\015\001\002\000\004\016\u010e\001\002\000\004\013\u010f" +
    "\001\002\000\010\012\ufff3\013\ufff3\150\ufff3\001\002\000" +
    "\010\012\uffed\013\uffed\150\uffed\001\002\000\006\036\251" +
    "\151\250\001\002\000\004\012\u0113\001\002\000\006\006" +
    "\013\153\015\001\002\000\004\012\u0115\001\002\000\006" +
    "\132\u0117\133\u0116\001\002\000\004\014\u011b\001\002\000" +
    "\004\014\u0118\001\002\000\022\025\136\026\135\027\133" +
    "\031\134\041\130\042\132\043\131\052\137\001\002\000" +
    "\004\013\u011a\001\002\000\010\012\ufff4\013\ufff4\150\ufff4" +
    "\001\002\000\022\025\136\026\135\027\133\031\134\041" +
    "\130\042\132\043\131\052\137\001\002\000\004\012\u011d" +
    "\001\002\000\004\132\u011e\001\002\000\004\014\u011f\001" +
    "\002\000\022\025\136\026\135\027\133\031\134\041\130" +
    "\042\132\043\131\052\137\001\002\000\004\013\u0121\001" +
    "\002\000\010\012\ufff5\013\ufff5\150\ufff5\001\002\000\006" +
    "\021\202\151\200\001\002\000\004\012\u0124\001\002\000" +
    "\004\015\u0125\001\002\000\010\006\013\016\uffbd\153\015" +
    "\001\002\000\012\006\u012f\007\u012d\072\u0130\074\u012e\001" +
    "\002\000\004\016\u012b\001\002\000\006\012\u0129\016\uffbc" +
    "\001\002\000\010\006\013\016\uffbd\153\015\001\002\000" +
    "\004\016\uffbb\001\002\000\004\013\u012c\001\002\000\010" +
    "\012\uffdd\013\uffdd\150\uffdd\001\002\000\004\152\u0134\001" +
    "\002\000\006\012\uffc1\016\uffc1\001\002\000\004\152\u0131" +
    "\001\002\000\006\012\uffc0\016\uffc0\001\002\000\004\102" +
    "\u0132\001\002\000\006\006\013\153\015\001\002\000\006" +
    "\012\uffbe\016\uffbe\001\002\000\004\102\u0135\001\002\000" +
    "\006\006\013\153\015\001\002\000\006\012\uffbf\016\uffbf" +
    "\001\002\000\004\007\u0138\001\002\000\106\006\uff87\007" +
    "\uff87\012\uff87\013\uff87\016\uff87\020\uff87\054\uff87\061\uff87" +
    "\067\uff87\070\uff87\072\uff87\074\uff87\075\uff87\077\uff87\101" +
    "\uff87\103\uff87\104\uff87\105\uff87\106\uff87\107\uff87\110\uff87" +
    "\111\uff87\114\uff87\120\uff87\122\uff87\123\uff87\127\uff87\137" +
    "\uff87\141\uff87\143\uff87\144\uff87\146\uff87\151\uff87\153\uff87" +
    "\001\002\000\004\005\u013a\001\002\000\004\006\u013b\001" +
    "\002\000\004\154\u013c\001\002\000\004\007\u013d\001\002" +
    "\000\004\010\u013e\001\002\000\010\002\uffff\004\uffff\035" +
    "\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013c\000\006\002\004\004\003\001\001\000\004\003" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\005\035\006\032\007\031" +
    "\011\042\012\041\013\050\014\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\u010f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\367\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\242\001\001\000\004\012\240\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\024\062\025\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\024\062\025\064\001\001\000\002\001\001\000" +
    "\004\032\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\150\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\154\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\160\001\001" +
    "\000\002\001\001\000\004\033\162\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\016\165\017\167\033\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\173" +
    "\001\001\000\002\001\001\000\010\016\165\017\175\033" +
    "\166\001\001\000\002\001\001\000\004\023\200\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\024\062\025\203\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\206\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\211\001\001\000\002\001\001" +
    "\000\004\033\213\001\001\000\002\001\001\000\004\033" +
    "\215\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\220\001\001\000\002\001\001\000\004\033\222\001" +
    "\001\000\002\001\001\000\004\033\224\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\231\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\233\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\024\062\025\236\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\245\001\001\000" +
    "\002\001\001\000\004\011\244\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\251\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\253" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\024" +
    "\062\025\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\263\001\001\000\020\005\035\006\032\007" +
    "\031\011\042\012\041\013\050\014\262\001\001\000\002" +
    "\001\001\000\006\030\310\033\302\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\317\001\001\000\002\001\001\000\004\021\321\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\325\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\331\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\336\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\341\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\345\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\350\001\001" +
    "\000\002\001\001\000\004\033\352\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\356" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\362\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\365\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\371\001\001" +
    "\000\002\001\001\000\004\033\373\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\376\001\001\000\002" +
    "\001\001\000\004\033\u0100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\u0104\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\u0107\001" +
    "\001\000\002\001\001\000\004\033\u0109\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\016\165\017\u010c\033" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\u0111\001\001\000" +
    "\002\001\001\000\004\033\u0113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\u0118\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\u011b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\u011f\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\u0122\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\026\u0127\027\u0126" +
    "\033\u0125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\026\u0127\027\u0129\033\u0125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\u0132\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\u0135\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public net.lemonmodel.patterns.parser.Absyn.Statements pStatements() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (net.lemonmodel.patterns.parser.Absyn.Statements) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // URI ::= _SYMB_2 FullURI _SYMB_3 
            {
              net.lemonmodel.patterns.parser.Absyn.URI RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EURI(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URI",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // URI ::= _IDENT_ _SYMB_1 _IDENT_ 
            {
              net.lemonmodel.patterns.parser.Absyn.URI RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EQName(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URI",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // POSTag ::= _STRING_ 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAnyPOS(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // POSTag ::= _SYMB_99 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EVerbPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // POSTag ::= _SYMB_94 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESlashPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // POSTag ::= _SYMB_92 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESemiColonPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // POSTag ::= _SYMB_89 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPunctuationPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // POSTag ::= _SYMB_85 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPronounPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // POSTag ::= _SYMB_82 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPrepositionPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // POSTag ::= _SYMB_81 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPostpositionPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // POSTag ::= _SYMB_80 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPointPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // POSTag ::= _SYMB_77 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EParticlePOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // POSTag ::= _SYMB_75 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENumeralPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // POSTag ::= _SYMB_74 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENounPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // POSTag ::= _SYMB_71 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EInterjectionPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // POSTag ::= _SYMB_58 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDeterminerPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // POSTag ::= _SYMB_55 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ECopulaPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // POSTag ::= _SYMB_53 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConjunctionPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // POSTag ::= _SYMB_50 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ECommaPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // POSTag ::= _SYMB_49 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EColonPOSPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // POSTag ::= _SYMB_47 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ECircumpositionPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // POSTag ::= _SYMB_46 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EBulletPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // POSTag ::= _SYMB_44 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EArticlePOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // POSTag ::= _SYMB_43 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAdverbPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // POSTag ::= _SYMB_42 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAdpositionPOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // POSTag ::= _SYMB_41 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTag RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAdjectivePOS(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTag",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ListCategory ::= ListCategory Category 
            {
              net.lemonmodel.patterns.parser.Absyn.ListCategory RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListCategory p_1 = (net.lemonmodel.patterns.parser.Absyn.ListCategory)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.Category p_2 = (net.lemonmodel.patterns.parser.Absyn.Category)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCategory",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ListCategory ::= 
            {
              net.lemonmodel.patterns.parser.Absyn.ListCategory RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListCategory(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCategory",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Category ::= URI _SYMB_12 URI 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_3 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAnyCat(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Category ::= _SYMB_76 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EParticiple(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Category ::= _SYMB_69 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EInfinitive(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Category ::= _SYMB_65 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EGerundive(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Category ::= _SYMB_52 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConditional(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Category ::= _SYMB_95 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESubjunctive(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Category ::= _SYMB_68 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EIndicative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Category ::= _SYMB_66 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EImperative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Category ::= _SYMB_67 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EImperfect(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Category ::= _SYMB_98 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EThirdPerson(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Category ::= _SYMB_91 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESecondPerson(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Category ::= _SYMB_61 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EFirstPerson(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Category ::= _SYMB_63 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EFuture(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Category ::= _SYMB_78 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPast(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Category ::= _SYMB_83 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPresent(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Category ::= _SYMB_96 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESuperlative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Category ::= _SYMB_51 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EComparative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Category ::= _SYMB_57 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Category ::= _SYMB_64 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EGenitive(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Category ::= _SYMB_40 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAccusative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Category ::= _SYMB_72 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENominative(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Category ::= _SYMB_79 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPlural(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Category ::= _SYMB_59 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDual(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Category ::= _SYMB_93 
            {
              net.lemonmodel.patterns.parser.Absyn.Category RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESingular(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Category",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ListScalarMembership ::= ScalarMembership _SYMB_6 ListScalarMembership 
            {
              net.lemonmodel.patterns.parser.Absyn.ListScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.ScalarMembership p_1 = (net.lemonmodel.patterns.parser.Absyn.ScalarMembership)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.ListScalarMembership p_3 = (net.lemonmodel.patterns.parser.Absyn.ListScalarMembership)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListScalarMembership",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ListScalarMembership ::= ScalarMembership 
            {
              net.lemonmodel.patterns.parser.Absyn.ListScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.ScalarMembership p_1 = (net.lemonmodel.patterns.parser.Absyn.ScalarMembership)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListScalarMembership(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListScalarMembership",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ListScalarMembership ::= 
            {
              net.lemonmodel.patterns.parser.Absyn.ListScalarMembership RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListScalarMembership(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListScalarMembership",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ScalarMembership ::= URI _SYMB_2 _DOUBLE_ _SYMB_62 URI 
            {
              net.lemonmodel.patterns.parser.Absyn.ScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double p_3 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.LessThanScalarMembership(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarMembership",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ScalarMembership ::= URI _SYMB_3 _DOUBLE_ _SYMB_62 URI 
            {
              net.lemonmodel.patterns.parser.Absyn.ScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double p_3 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.GreaterThanScalarMembership(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarMembership",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ScalarMembership ::= URI _SYMB_54 
            {
              net.lemonmodel.patterns.parser.Absyn.ScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ContravariantScalarMembership(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarMembership",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ScalarMembership ::= URI _SYMB_56 
            {
              net.lemonmodel.patterns.parser.Absyn.ScalarMembership RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.CovariantScalarMembership(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarMembership",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ListPOSTaggedWord ::= POSTaggedWord _SYMB_6 ListPOSTaggedWord 
            {
              net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.POSTaggedWord p_1 = (net.lemonmodel.patterns.parser.Absyn.POSTaggedWord)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord p_3 = (net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPOSTaggedWord",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ListPOSTaggedWord ::= POSTaggedWord 
            {
              net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.POSTaggedWord p_1 = (net.lemonmodel.patterns.parser.Absyn.POSTaggedWord)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPOSTaggedWord",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ListPOSTaggedWord ::= 
            {
              net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPOSTaggedWord",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // POSTaggedWord ::= _STRING_ _SYMB_11 POSTag 
            {
              net.lemonmodel.patterns.parser.Absyn.POSTaggedWord RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.POSTag p_3 = (net.lemonmodel.patterns.parser.Absyn.POSTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPOSTaggedWord(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSTaggedWord",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // AP ::= _SYMB_13 _SYMB_5 ListPOSTaggedWord _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.AP RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord p_3 = (net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAPComplex(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // AP ::= _STRING_ 
            {
              net.lemonmodel.patterns.parser.Absyn.AP RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAPSimple(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VP ::= _SYMB_39 _SYMB_5 ListPOSTaggedWord _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.VP RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord p_3 = (net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EVPComplex(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VP ::= _STRING_ 
            {
              net.lemonmodel.patterns.parser.Absyn.VP RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EVPSimple(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VP",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NP ::= _SYMB_26 _SYMB_5 ListPOSTaggedWord _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.NP RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord p_3 = (net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENPComplex(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NP ::= _STRING_ 
            {
              net.lemonmodel.patterns.parser.Absyn.NP RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENPSimple(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PNP ::= _SYMB_28 _SYMB_5 ListPOSTaggedWord _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.PNP RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord p_3 = (net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPNPComplex(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PNP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PNP ::= _STRING_ 
            {
              net.lemonmodel.patterns.parser.Absyn.PNP RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPNPSimple(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PNP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ListOntologyFrameElement ::= OntologyFrameElement _SYMB_6 ListOntologyFrameElement 
            {
              net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_1 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement p_3 = (net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListOntologyFrameElement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ListOntologyFrameElement ::= OntologyFrameElement 
            {
              net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement p_1 = (net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListOntologyFrameElement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ListOntologyFrameElement ::= 
            {
              net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListOntologyFrameElement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OntologyFrameElement ::= URI _SYMB_45 Arg 
            {
              net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_1 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_3 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EURIAsSynArg(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OntologyFrameElement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Arg ::= _SYMB_29 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPossessiveAdjunct(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Arg ::= _SYMB_30 _SYMB_5 _STRING_ _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPostpositionalObject(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Arg ::= _SYMB_31 _SYMB_5 _STRING_ _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPrepositionalObject(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Arg ::= _SYMB_18 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ECopulativeSubject(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Arg ::= _SYMB_17 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ECopulativeArg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Arg ::= _SYMB_21 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EIndirectObject(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Arg ::= _SYMB_19 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDirectObject(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Arg ::= _SYMB_38 
            {
              net.lemonmodel.patterns.parser.Absyn.Arg RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ESubject(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ListPattern ::= Pattern _SYMB_6 ListPattern 
            {
              net.lemonmodel.patterns.parser.Absyn.ListPattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.Pattern p_1 = (net.lemonmodel.patterns.parser.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.ListPattern p_3 = (net.lemonmodel.patterns.parser.Absyn.ListPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPattern",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ListPattern ::= Pattern 
            {
              net.lemonmodel.patterns.parser.Absyn.ListPattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.Pattern p_1 = (net.lemonmodel.patterns.parser.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPattern",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ListPattern ::= 
            {
              net.lemonmodel.patterns.parser.Absyn.ListPattern RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListPattern(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPattern",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // AdjectivePattern ::= _SYMB_36 _SYMB_5 AP _SYMB_6 _SYMB_9 ListScalarMembership _SYMB_10 _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.AdjectivePattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.AP p_3 = (net.lemonmodel.patterns.parser.Absyn.AP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.ListScalarMembership p_6 = (net.lemonmodel.patterns.parser.Absyn.ListScalarMembership)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EScalarAdjective(p_3,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdjectivePattern",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // AdjectivePattern ::= _SYMB_33 _SYMB_5 AP _SYMB_6 URI _SYMB_6 _SYMB_90 _SYMB_8 Arg _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.AdjectivePattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.AP p_3 = (net.lemonmodel.patterns.parser.Absyn.AP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_9 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ERelationalAdjective(p_3,p_5,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdjectivePattern",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // AdjectivePattern ::= _SYMB_32 _SYMB_5 AP _SYMB_6 URI _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.AdjectivePattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.AP p_3 = (net.lemonmodel.patterns.parser.Absyn.AP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPropertyModifyingAdjective(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdjectivePattern",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // AdjectivePattern ::= _SYMB_23 _SYMB_5 AP _SYMB_6 URI _SYMB_6 URI _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.AdjectivePattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.AP p_3 = (net.lemonmodel.patterns.parser.Absyn.AP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_7 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EIntersectiveDataPropertyAdjective(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdjectivePattern",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // AdjectivePattern ::= _SYMB_24 _SYMB_5 AP _SYMB_6 URI _SYMB_6 URI _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.AdjectivePattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.AP p_3 = (net.lemonmodel.patterns.parser.Absyn.AP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_7 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EIntersectiveObjectPropertyAdjective(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdjectivePattern",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // AdjectivePattern ::= _SYMB_22 _SYMB_5 AP _SYMB_6 URI _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.AdjectivePattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.AP p_3 = (net.lemonmodel.patterns.parser.Absyn.AP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EIntersectiveAdjective(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdjectivePattern",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VerbPattern4 ::= _SYMB_16 _SYMB_5 VP _SYMB_6 URI _SYMB_6 _SYMB_87 _SYMB_8 Arg _SYMB_6 _SYMB_86 _SYMB_8 Arg _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_9 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_13left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_13right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_13 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConsequenceVerb2(p_3,p_5,p_9,p_13); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern4",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VerbPattern4 ::= _SYMB_16 _SYMB_5 VP _SYMB_6 URI _SYMB_6 _SYMB_87 _SYMB_8 Arg _SYMB_6 _SYMB_86 _SYMB_8 Arg _SYMB_6 URI _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_9 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_13left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_13right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_13 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_15left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_15right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_15 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConsequenceVerb1(p_3,p_5,p_9,p_13,p_15); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern4",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VerbPattern3 ::= _SYMB_20 _SYMB_5 VP _SYMB_6 URI _SYMB_6 _SYMB_9 ListOntologyFrameElement _SYMB_10 _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement p_8 = (net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EEventVerb(p_3,p_5,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern3",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VerbPattern2 ::= _SYMB_70 VerbPattern3 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.VerbPattern p_2 = (net.lemonmodel.patterns.parser.Absyn.VerbPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EInstantEventVerb(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VerbPattern2 ::= _SYMB_60 VerbPattern3 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.VerbPattern p_2 = (net.lemonmodel.patterns.parser.Absyn.VerbPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDurativeEventVerb(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VerbPattern ::= VerbPattern4 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.VerbPattern p_1 = (net.lemonmodel.patterns.parser.Absyn.VerbPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EConsequenceVerb(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VerbPattern ::= _SYMB_70 VerbPattern4 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.VerbPattern p_2 = (net.lemonmodel.patterns.parser.Absyn.VerbPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EInstantConsequenceVerb(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VerbPattern ::= _SYMB_60 VerbPattern4 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.VerbPattern p_2 = (net.lemonmodel.patterns.parser.Absyn.VerbPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDurativeConsequenceVerb(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VerbPattern ::= VerbPattern3 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.VerbPattern p_1 = (net.lemonmodel.patterns.parser.Absyn.VerbPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EDunnotelicEventVerb(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VerbPattern ::= _SYMB_73 VerbPattern2 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.VerbPattern p_2 = (net.lemonmodel.patterns.parser.Absyn.VerbPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENontelicEventVerb(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VerbPattern ::= _SYMB_97 VerbPattern2 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.VerbPattern p_2 = (net.lemonmodel.patterns.parser.Absyn.VerbPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ETelicEventVerb(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VerbPattern ::= _SYMB_37 _SYMB_5 VP _SYMB_6 URI _SYMB_6 _SYMB_87 _SYMB_8 Arg _SYMB_6 _SYMB_84 _SYMB_8 Arg _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_9 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_13left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_13right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_13 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EStateVerb3(p_3,p_5,p_9,p_13); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VerbPattern ::= _SYMB_37 _SYMB_5 VP _SYMB_6 URI _SYMB_6 _SYMB_86 _SYMB_8 Arg _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_9 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EStateVerb2(p_3,p_5,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VerbPattern ::= _SYMB_37 _SYMB_5 VP _SYMB_6 URI _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.VerbPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.VP p_3 = (net.lemonmodel.patterns.parser.Absyn.VP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EStateVerb1(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VerbPattern",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NounPattern ::= _SYMB_15 _SYMB_5 NP _SYMB_6 _SYMB_88 _SYMB_8 URI _SYMB_6 _SYMB_48 _SYMB_8 URI _SYMB_6 _SYMB_86 _SYMB_8 Arg _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		net.lemonmodel.patterns.parser.Absyn.NP p_3 = (net.lemonmodel.patterns.parser.Absyn.NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_7 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_11left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_11right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_11 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_15left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_15right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_15 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EClassRelationalNoun2(p_3,p_7,p_11,p_15); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NounPattern ::= _SYMB_15 _SYMB_5 NP _SYMB_6 _SYMB_88 _SYMB_8 URI _SYMB_6 _SYMB_48 _SYMB_8 URI _SYMB_6 _SYMB_87 _SYMB_8 Arg _SYMB_6 _SYMB_86 _SYMB_8 Arg _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		net.lemonmodel.patterns.parser.Absyn.NP p_3 = (net.lemonmodel.patterns.parser.Absyn.NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_7 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int p_11left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_11right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_11 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_15left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_15right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_15 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_19left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_19right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_19 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EClassRelationalNoun1(p_3,p_7,p_11,p_15,p_19); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NounPattern ::= _SYMB_34 _SYMB_5 NP _SYMB_6 URI _SYMB_6 _SYMB_9 ListOntologyFrameElement _SYMB_10 _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.NP p_3 = (net.lemonmodel.patterns.parser.Absyn.NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement p_8 = (net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ERelationalMultivalentNoun(p_3,p_5,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NounPattern ::= _SYMB_35 _SYMB_5 NP _SYMB_6 URI _SYMB_6 _SYMB_86 _SYMB_8 Arg _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		net.lemonmodel.patterns.parser.Absyn.NP p_3 = (net.lemonmodel.patterns.parser.Absyn.NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_9 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ERelationalNoun2(p_3,p_5,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NounPattern ::= _SYMB_35 _SYMB_5 NP _SYMB_6 URI _SYMB_6 _SYMB_87 _SYMB_8 Arg _SYMB_6 _SYMB_86 _SYMB_8 Arg _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		net.lemonmodel.patterns.parser.Absyn.NP p_3 = (net.lemonmodel.patterns.parser.Absyn.NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_9 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_13left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_13right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Arg p_13 = (net.lemonmodel.patterns.parser.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ERelationalNoun1(p_3,p_5,p_9,p_13); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NounPattern ::= _SYMB_14 _SYMB_5 NP _SYMB_6 URI _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.NP p_3 = (net.lemonmodel.patterns.parser.Absyn.NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EClassNoun(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NounPattern ::= _SYMB_27 _SYMB_5 PNP _SYMB_6 URI _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.NounPattern RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.PNP p_3 = (net.lemonmodel.patterns.parser.Absyn.PNP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_5 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EName(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NounPattern",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Pattern ::= AdjectivePattern 
            {
              net.lemonmodel.patterns.parser.Absyn.Pattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.AdjectivePattern p_1 = (net.lemonmodel.patterns.parser.Absyn.AdjectivePattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EAdjective(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Pattern ::= VerbPattern 
            {
              net.lemonmodel.patterns.parser.Absyn.Pattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.VerbPattern p_1 = (net.lemonmodel.patterns.parser.Absyn.VerbPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EVerb(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Pattern ::= NounPattern 
            {
              net.lemonmodel.patterns.parser.Absyn.Pattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.NounPattern p_1 = (net.lemonmodel.patterns.parser.Absyn.NounPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ENoun(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Pattern ::= Pattern _SYMB_100 ListCategory _STRING_ 
            {
              net.lemonmodel.patterns.parser.Absyn.Pattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		net.lemonmodel.patterns.parser.Absyn.Pattern p_1 = (net.lemonmodel.patterns.parser.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListCategory p_3 = (net.lemonmodel.patterns.parser.Absyn.ListCategory)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPatternWithForm(p_1,p_3,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListStatement ::= ListStatement Statement 
            {
              net.lemonmodel.patterns.parser.Absyn.ListStatement RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListStatement p_1 = (net.lemonmodel.patterns.parser.Absyn.ListStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.Statement p_2 = (net.lemonmodel.patterns.parser.Absyn.Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStatement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListStatement ::= 
            {
              net.lemonmodel.patterns.parser.Absyn.ListStatement RESULT =null;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ListStatement(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStatement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Statement ::= _SYMB_25 _SYMB_5 URI _SYMB_6 _STRING_ _SYMB_6 ListPattern _SYMB_7 
            {
              net.lemonmodel.patterns.parser.Absyn.Statement RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		net.lemonmodel.patterns.parser.Absyn.URI p_3 = (net.lemonmodel.patterns.parser.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.ListPattern p_7 = (net.lemonmodel.patterns.parser.Absyn.ListPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.ELexicon(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Statement ::= _SYMB_0 _IDENT_ _SYMB_1 _SYMB_2 FullURI _SYMB_3 _SYMB_4 
            {
              net.lemonmodel.patterns.parser.Absyn.Statement RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p_5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EPrefix(p_2,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Statements ::= ListStatement 
            {
              net.lemonmodel.patterns.parser.Absyn.Statements RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		net.lemonmodel.patterns.parser.Absyn.ListStatement p_1 = (net.lemonmodel.patterns.parser.Absyn.ListStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new net.lemonmodel.patterns.parser.Absyn.EStatments(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Statements EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		net.lemonmodel.patterns.parser.Absyn.Statements start_val = (net.lemonmodel.patterns.parser.Absyn.Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

