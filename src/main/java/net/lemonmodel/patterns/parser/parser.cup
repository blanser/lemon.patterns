// -*- Java -*- This Cup file was machine-generated by BNFC
package net.lemonmodel.patterns.parser;

parser code {:
  public net.lemonmodel.patterns.parser.Absyn.Statements pStatements() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (net.lemonmodel.patterns.parser.Absyn.Statements) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal net.lemonmodel.patterns.parser.Absyn.Statements Statements;
nonterminal net.lemonmodel.patterns.parser.Absyn.Statement Statement;
nonterminal net.lemonmodel.patterns.parser.Absyn.ListStatement ListStatement;
nonterminal net.lemonmodel.patterns.parser.Absyn.Pattern Pattern;
nonterminal net.lemonmodel.patterns.parser.Absyn.NounPattern NounPattern;
nonterminal net.lemonmodel.patterns.parser.Absyn.VerbPattern VerbPattern;
nonterminal net.lemonmodel.patterns.parser.Absyn.VerbPattern VerbPattern2;
nonterminal net.lemonmodel.patterns.parser.Absyn.VerbPattern VerbPattern3;
nonterminal net.lemonmodel.patterns.parser.Absyn.VerbPattern VerbPattern4;
nonterminal net.lemonmodel.patterns.parser.Absyn.AdjectivePattern AdjectivePattern;
nonterminal net.lemonmodel.patterns.parser.Absyn.ListPattern ListPattern;
nonterminal net.lemonmodel.patterns.parser.Absyn.Arg Arg;
nonterminal net.lemonmodel.patterns.parser.Absyn.OntologyFrameElement OntologyFrameElement;
nonterminal net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement ListOntologyFrameElement;
nonterminal net.lemonmodel.patterns.parser.Absyn.PNP PNP;
nonterminal net.lemonmodel.patterns.parser.Absyn.NP NP;
nonterminal net.lemonmodel.patterns.parser.Absyn.VP VP;
nonterminal net.lemonmodel.patterns.parser.Absyn.AP AP;
nonterminal net.lemonmodel.patterns.parser.Absyn.POSTaggedWord POSTaggedWord;
nonterminal net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord ListPOSTaggedWord;
nonterminal net.lemonmodel.patterns.parser.Absyn.ScalarMembership ScalarMembership;
nonterminal net.lemonmodel.patterns.parser.Absyn.ListScalarMembership ListScalarMembership;
nonterminal net.lemonmodel.patterns.parser.Absyn.Category Category;
nonterminal net.lemonmodel.patterns.parser.Absyn.ListCategory ListCategory;
nonterminal net.lemonmodel.patterns.parser.Absyn.POSTag POSTag;
nonterminal net.lemonmodel.patterns.parser.Absyn.URI URI;

terminal _SYMB_0;    //   @prefix
terminal _SYMB_1;    //   :
terminal _SYMB_2;    //   <
terminal _SYMB_3;    //   >
terminal _SYMB_4;    //   .
terminal _SYMB_5;    //   (
terminal _SYMB_6;    //   ,
terminal _SYMB_7;    //   )
terminal _SYMB_8;    //   =
terminal _SYMB_9;    //   [
terminal _SYMB_10;    //   ]
terminal _SYMB_11;    //   /
terminal _SYMB_12;    //   =>
terminal _SYMB_13;    //   AP
terminal _SYMB_14;    //   ClassNoun
terminal _SYMB_15;    //   ClassRelationalNoun
terminal _SYMB_16;    //   ConsequenceVerb
terminal _SYMB_17;    //   CopulativeArg
terminal _SYMB_18;    //   CopulativeSubject
terminal _SYMB_19;    //   DirectObject
terminal _SYMB_20;    //   EventVerb
terminal _SYMB_21;    //   IndirectObject
terminal _SYMB_22;    //   IntersectiveAdjective
terminal _SYMB_23;    //   IntersectiveDataPropertyAdjective
terminal _SYMB_24;    //   IntersectiveObjectPropertyAdjective
terminal _SYMB_25;    //   Lexicon
terminal _SYMB_26;    //   NP
terminal _SYMB_27;    //   Name
terminal _SYMB_28;    //   PNP
terminal _SYMB_29;    //   PossessiveAdjunct
terminal _SYMB_30;    //   PostpositionalObject
terminal _SYMB_31;    //   PrepositionalObject
terminal _SYMB_32;    //   PropertyModifyingAdjective
terminal _SYMB_33;    //   RelationalAdjective
terminal _SYMB_34;    //   RelationalMultivalentNoun
terminal _SYMB_35;    //   RelationalNoun
terminal _SYMB_36;    //   ScalarAdjective
terminal _SYMB_37;    //   StateVerb
terminal _SYMB_38;    //   Subject
terminal _SYMB_39;    //   VP
terminal _SYMB_40;    //   accusative
terminal _SYMB_41;    //   adjective
terminal _SYMB_42;    //   adposition
terminal _SYMB_43;    //   adverb
terminal _SYMB_44;    //   article
terminal _SYMB_45;    //   as
terminal _SYMB_46;    //   bullet
terminal _SYMB_47;    //   circumposition
terminal _SYMB_48;    //   class
terminal _SYMB_49;    //   colon
terminal _SYMB_50;    //   comma
terminal _SYMB_51;    //   comparative
terminal _SYMB_52;    //   conditional
terminal _SYMB_53;    //   conjunction
terminal _SYMB_54;    //   contravariant
terminal _SYMB_55;    //   copula
terminal _SYMB_56;    //   covariant
terminal _SYMB_57;    //   dative
terminal _SYMB_58;    //   determiner
terminal _SYMB_59;    //   dual
terminal _SYMB_60;    //   durative
terminal _SYMB_61;    //   firstPerson
terminal _SYMB_62;    //   for
terminal _SYMB_63;    //   future
terminal _SYMB_64;    //   genitive
terminal _SYMB_65;    //   gerundive
terminal _SYMB_66;    //   imperative
terminal _SYMB_67;    //   imperfect
terminal _SYMB_68;    //   indicative
terminal _SYMB_69;    //   infinitive
terminal _SYMB_70;    //   instant
terminal _SYMB_71;    //   interjection
terminal _SYMB_72;    //   nominative
terminal _SYMB_73;    //   nontelic
terminal _SYMB_74;    //   noun
terminal _SYMB_75;    //   numeral
terminal _SYMB_76;    //   participle
terminal _SYMB_77;    //   particle
terminal _SYMB_78;    //   past
terminal _SYMB_79;    //   plural
terminal _SYMB_80;    //   point
terminal _SYMB_81;    //   postposition
terminal _SYMB_82;    //   preposition
terminal _SYMB_83;    //   present
terminal _SYMB_84;    //   probObj
terminal _SYMB_85;    //   pronoun
terminal _SYMB_86;    //   propObj
terminal _SYMB_87;    //   propSubj
terminal _SYMB_88;    //   property
terminal _SYMB_89;    //   punctuation
terminal _SYMB_90;    //   relationalArg
terminal _SYMB_91;    //   secondPerson
terminal _SYMB_92;    //   semiColon
terminal _SYMB_93;    //   singular
terminal _SYMB_94;    //   slash
terminal _SYMB_95;    //   subjunctive
terminal _SYMB_96;    //   superlative
terminal _SYMB_97;    //   telic
terminal _SYMB_98;    //   thirdPerson
terminal _SYMB_99;    //   verb
terminal _SYMB_100;    //   with

terminal String _STRING_;


terminal Double _DOUBLE_;
terminal String _IDENT_;

terminal String FullURI;


start with Statements;


Statements ::= ListStatement:p_1  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EStatments(p_1); :} 
;
Statement ::= _SYMB_0 _IDENT_:p_2 _SYMB_1 _SYMB_2 FullURI:p_5 _SYMB_3 _SYMB_4  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EPrefix(p_2,p_5); :} 
  | _SYMB_25 _SYMB_5 URI:p_3 _SYMB_6 _STRING_:p_5 _SYMB_6 ListPattern:p_7 _SYMB_7  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.ELexicon(p_3,p_5,p_7); :}
;
ListStatement ::=  /* empty */  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.ListStatement(); :} 
  | ListStatement:p_1 Statement:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
Pattern ::= Pattern:p_1 _SYMB_100 ListCategory:p_3 _STRING_:p_4  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EPatternWithForm(p_1,p_3,p_4); :} 
  | NounPattern:p_1  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.ENoun(p_1); :}
  | VerbPattern:p_1  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EVerb(p_1); :}
  | AdjectivePattern:p_1  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EAdjective(p_1); :}
;
NounPattern ::= _SYMB_27 _SYMB_5 PNP:p_3 _SYMB_6 URI:p_5 _SYMB_7  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EName(p_3,p_5); :} 
  | _SYMB_14 _SYMB_5 NP:p_3 _SYMB_6 URI:p_5 _SYMB_7  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EClassNoun(p_3,p_5); :}
  | _SYMB_35 _SYMB_5 NP:p_3 _SYMB_6 URI:p_5 _SYMB_6 _SYMB_87 _SYMB_8 Arg:p_9 _SYMB_6 _SYMB_86 _SYMB_8 Arg:p_13 _SYMB_7  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.ERelationalNoun1(p_3,p_5,p_9,p_13); :}
  | _SYMB_35 _SYMB_5 NP:p_3 _SYMB_6 URI:p_5 _SYMB_6 _SYMB_86 _SYMB_8 Arg:p_9 _SYMB_7  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.ERelationalNoun2(p_3,p_5,p_9); :}
  | _SYMB_34 _SYMB_5 NP:p_3 _SYMB_6 URI:p_5 _SYMB_6 _SYMB_9 ListOntologyFrameElement:p_8 _SYMB_10 _SYMB_7  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.ERelationalMultivalentNoun(p_3,p_5,p_8); :}
  | _SYMB_15 _SYMB_5 NP:p_3 _SYMB_6 _SYMB_88 _SYMB_8 URI:p_7 _SYMB_6 _SYMB_48 _SYMB_8 URI:p_11 _SYMB_6 _SYMB_87 _SYMB_8 Arg:p_15 _SYMB_6 _SYMB_86 _SYMB_8 Arg:p_19 _SYMB_7  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EClassRelationalNoun1(p_3,p_7,p_11,p_15,p_19); :}
  | _SYMB_15 _SYMB_5 NP:p_3 _SYMB_6 _SYMB_88 _SYMB_8 URI:p_7 _SYMB_6 _SYMB_48 _SYMB_8 URI:p_11 _SYMB_6 _SYMB_86 _SYMB_8 Arg:p_15 _SYMB_7  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EClassRelationalNoun2(p_3,p_7,p_11,p_15); :}
;
VerbPattern ::= _SYMB_37 _SYMB_5 VP:p_3 _SYMB_6 URI:p_5 _SYMB_7  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EStateVerb1(p_3,p_5); :} 
  | _SYMB_37 _SYMB_5 VP:p_3 _SYMB_6 URI:p_5 _SYMB_6 _SYMB_86 _SYMB_8 Arg:p_9 _SYMB_7  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EStateVerb2(p_3,p_5,p_9); :}
  | _SYMB_37 _SYMB_5 VP:p_3 _SYMB_6 URI:p_5 _SYMB_6 _SYMB_87 _SYMB_8 Arg:p_9 _SYMB_6 _SYMB_84 _SYMB_8 Arg:p_13 _SYMB_7  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EStateVerb3(p_3,p_5,p_9,p_13); :}
  | _SYMB_97 VerbPattern2:p_2  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.ETelicEventVerb(p_2); :}
  | _SYMB_73 VerbPattern2:p_2  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.ENontelicEventVerb(p_2); :}
  | VerbPattern3:p_1  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EDunnotelicEventVerb(p_1); :}
  | _SYMB_60 VerbPattern4:p_2  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EDurativeConsequenceVerb(p_2); :}
  | _SYMB_70 VerbPattern4:p_2  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EInstantConsequenceVerb(p_2); :}
  | VerbPattern4:p_1  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EConsequenceVerb(p_1); :}
;
VerbPattern2 ::= _SYMB_60 VerbPattern3:p_2  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EDurativeEventVerb(p_2); :} 
  | _SYMB_70 VerbPattern3:p_2  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EInstantEventVerb(p_2); :}
;
VerbPattern3 ::= _SYMB_20 _SYMB_5 VP:p_3 _SYMB_6 URI:p_5 _SYMB_6 _SYMB_9 ListOntologyFrameElement:p_8 _SYMB_10 _SYMB_7  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EEventVerb(p_3,p_5,p_8); :} 
;
VerbPattern4 ::= _SYMB_16 _SYMB_5 VP:p_3 _SYMB_6 URI:p_5 _SYMB_6 _SYMB_87 _SYMB_8 Arg:p_9 _SYMB_6 _SYMB_86 _SYMB_8 Arg:p_13 _SYMB_6 URI:p_15 _SYMB_7  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EConsequenceVerb1(p_3,p_5,p_9,p_13,p_15); :} 
  | _SYMB_16 _SYMB_5 VP:p_3 _SYMB_6 URI:p_5 _SYMB_6 _SYMB_87 _SYMB_8 Arg:p_9 _SYMB_6 _SYMB_86 _SYMB_8 Arg:p_13 _SYMB_7  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EConsequenceVerb2(p_3,p_5,p_9,p_13); :}
;
AdjectivePattern ::= _SYMB_22 _SYMB_5 AP:p_3 _SYMB_6 URI:p_5 _SYMB_7  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EIntersectiveAdjective(p_3,p_5); :} 
  | _SYMB_24 _SYMB_5 AP:p_3 _SYMB_6 URI:p_5 _SYMB_6 URI:p_7 _SYMB_7  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EIntersectiveObjectPropertyAdjective(p_3,p_5,p_7); :}
  | _SYMB_23 _SYMB_5 AP:p_3 _SYMB_6 URI:p_5 _SYMB_6 URI:p_7 _SYMB_7  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EIntersectiveDataPropertyAdjective(p_3,p_5,p_7); :}
  | _SYMB_32 _SYMB_5 AP:p_3 _SYMB_6 URI:p_5 _SYMB_7  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EPropertyModifyingAdjective(p_3,p_5); :}
  | _SYMB_33 _SYMB_5 AP:p_3 _SYMB_6 URI:p_5 _SYMB_6 _SYMB_90 _SYMB_8 Arg:p_9 _SYMB_7  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.ERelationalAdjective(p_3,p_5,p_9); :}
  | _SYMB_36 _SYMB_5 AP:p_3 _SYMB_6 _SYMB_9 ListScalarMembership:p_6 _SYMB_10 _SYMB_7  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EScalarAdjective(p_3,p_6); :}
;
ListPattern ::=  /* empty */  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.ListPattern(); :} 
  | Pattern:p_1  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.ListPattern(); RESULT.addLast(p_1); :}
  | Pattern:p_1 _SYMB_6 ListPattern:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
Arg ::= _SYMB_38  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.ESubject(); :} 
  | _SYMB_19  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EDirectObject(); :}
  | _SYMB_21  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EIndirectObject(); :}
  | _SYMB_17  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.ECopulativeArg(); :}
  | _SYMB_18  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.ECopulativeSubject(); :}
  | _SYMB_31 _SYMB_5 _STRING_:p_3 _SYMB_7  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EPrepositionalObject(p_3); :}
  | _SYMB_30 _SYMB_5 _STRING_:p_3 _SYMB_7  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EPostpositionalObject(p_3); :}
  | _SYMB_29  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EPossessiveAdjunct(); :}
;
OntologyFrameElement ::= URI:p_1 _SYMB_45 Arg:p_3  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EURIAsSynArg(p_1,p_3); :} 
;
ListOntologyFrameElement ::=  /* empty */  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement(); :} 
  | OntologyFrameElement:p_1  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.ListOntologyFrameElement(); RESULT.addLast(p_1); :}
  | OntologyFrameElement:p_1 _SYMB_6 ListOntologyFrameElement:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
PNP ::= _STRING_:p_1  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EPNPSimple(p_1); :} 
  | _SYMB_28 _SYMB_5 ListPOSTaggedWord:p_3 _SYMB_7  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EPNPComplex(p_3); :}
;
NP ::= _STRING_:p_1  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.ENPSimple(p_1); :} 
  | _SYMB_26 _SYMB_5 ListPOSTaggedWord:p_3 _SYMB_7  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.ENPComplex(p_3); :}
;
VP ::= _STRING_:p_1  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EVPSimple(p_1); :} 
  | _SYMB_39 _SYMB_5 ListPOSTaggedWord:p_3 _SYMB_7  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EVPComplex(p_3); :}
;
AP ::= _STRING_:p_1  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EAPSimple(p_1); :} 
  | _SYMB_13 _SYMB_5 ListPOSTaggedWord:p_3 _SYMB_7  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EAPComplex(p_3); :}
;
POSTaggedWord ::= _STRING_:p_1 _SYMB_11 POSTag:p_3  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EPOSTaggedWord(p_1,p_3); :} 
;
ListPOSTaggedWord ::=  /* empty */  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord(); :} 
  | POSTaggedWord:p_1  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.ListPOSTaggedWord(); RESULT.addLast(p_1); :}
  | POSTaggedWord:p_1 _SYMB_6 ListPOSTaggedWord:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ScalarMembership ::= URI:p_1 _SYMB_56  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.CovariantScalarMembership(p_1); :} 
  | URI:p_1 _SYMB_54  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.ContravariantScalarMembership(p_1); :}
  | URI:p_1 _SYMB_3 _DOUBLE_:p_3 _SYMB_62 URI:p_5  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.GreaterThanScalarMembership(p_1,p_3,p_5); :}
  | URI:p_1 _SYMB_2 _DOUBLE_:p_3 _SYMB_62 URI:p_5  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.LessThanScalarMembership(p_1,p_3,p_5); :}
;
ListScalarMembership ::=  /* empty */  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.ListScalarMembership(); :} 
  | ScalarMembership:p_1  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.ListScalarMembership(); RESULT.addLast(p_1); :}
  | ScalarMembership:p_1 _SYMB_6 ListScalarMembership:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
Category ::= _SYMB_93  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.ESingular(); :} 
  | _SYMB_59  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EDual(); :}
  | _SYMB_79  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EPlural(); :}
  | _SYMB_72  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.ENominative(); :}
  | _SYMB_40  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EAccusative(); :}
  | _SYMB_64  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EGenitive(); :}
  | _SYMB_57  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EDative(); :}
  | _SYMB_51  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EComparative(); :}
  | _SYMB_96  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.ESuperlative(); :}
  | _SYMB_83  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EPresent(); :}
  | _SYMB_78  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EPast(); :}
  | _SYMB_63  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EFuture(); :}
  | _SYMB_61  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EFirstPerson(); :}
  | _SYMB_91  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.ESecondPerson(); :}
  | _SYMB_98  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EThirdPerson(); :}
  | _SYMB_67  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EImperfect(); :}
  | _SYMB_66  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EImperative(); :}
  | _SYMB_68  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EIndicative(); :}
  | _SYMB_95  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.ESubjunctive(); :}
  | _SYMB_52  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EConditional(); :}
  | _SYMB_65  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EGerundive(); :}
  | _SYMB_69  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EInfinitive(); :}
  | _SYMB_76  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EParticiple(); :}
  | URI:p_1 _SYMB_12 URI:p_3  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EAnyCat(p_1,p_3); :}
;
ListCategory ::=  /* empty */  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.ListCategory(); :} 
  | ListCategory:p_1 Category:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
POSTag ::= _SYMB_41  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EAdjectivePOS(); :} 
  | _SYMB_42  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EAdpositionPOS(); :}
  | _SYMB_43  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EAdverbPOS(); :}
  | _SYMB_44  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EArticlePOS(); :}
  | _SYMB_46  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EBulletPOS(); :}
  | _SYMB_47  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.ECircumpositionPOS(); :}
  | _SYMB_49  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EColonPOSPOS(); :}
  | _SYMB_50  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.ECommaPOS(); :}
  | _SYMB_53  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EConjunctionPOS(); :}
  | _SYMB_55  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.ECopulaPOS(); :}
  | _SYMB_58  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EDeterminerPOS(); :}
  | _SYMB_71  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EInterjectionPOS(); :}
  | _SYMB_74  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.ENounPOS(); :}
  | _SYMB_75  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.ENumeralPOS(); :}
  | _SYMB_77  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EParticlePOS(); :}
  | _SYMB_80  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EPointPOS(); :}
  | _SYMB_81  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EPostpositionPOS(); :}
  | _SYMB_82  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EPrepositionPOS(); :}
  | _SYMB_85  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EPronounPOS(); :}
  | _SYMB_89  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EPunctuationPOS(); :}
  | _SYMB_92  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.ESemiColonPOS(); :}
  | _SYMB_94  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.ESlashPOS(); :}
  | _SYMB_99  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EVerbPOS(); :}
  | _STRING_:p_1  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EAnyPOS(p_1); :}
;
URI ::= _IDENT_:p_1 _SYMB_1 _IDENT_:p_3  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EQName(p_1,p_3); :} 
  | _SYMB_2 FullURI:p_2 _SYMB_3  {: RESULT = new net.lemonmodel.patterns.parser.Absyn.EURI(p_2); :}
;

